import{$b as b,A as p,C as d,D as h,Ib as m,K as g,O as o,Sb as f,Ub as S,a,b as E,d as l,h as x,l as c,m as u,o as t,x as v}from"./chunk-NYDQRTHI.js";var O=class n{http=o(m);storageService=o(S);trackingService=o(b);EXERCISES_STORAGE_KEY="fitTrackPro_exercises";exercisesJsonUrl="assets/data/exercises.json";exercisesSubject;exercises$;serviceInitializedPromise;serviceInitializedResolve;constructor(){this.serviceInitializedPromise=new Promise(r=>{this.serviceInitializedResolve=r});let e=this.loadExercisesFromStorage();this.exercisesSubject=new x(e),this.exercises$=this.exercisesSubject.asObservable().pipe(h(1)),e.length===0?this.seedExercisesFromAssets():this.serviceInitializedResolve()}loadExercisesFromStorage(){return this.storageService.getItem(this.EXERCISES_STORAGE_KEY)||[]}saveExercisesToStorage(e){this.storageService.setItem(this.EXERCISES_STORAGE_KEY,e),this.exercisesSubject.next([...e].sort((r,s)=>r.name.localeCompare(s.name)))}seedExercisesFromAssets(){this.http.get(this.exercisesJsonUrl).pipe(p(1),v(e=>(console.error("ExerciseService: Failed to load seed exercises from JSON file:",e),c([])))).subscribe(e=>{e&&e.length>0&&this.exercisesSubject.getValue().length===0&&this.saveExercisesToStorage(e),this.serviceInitializedResolve()})}ensureInitialized(){return this.serviceInitializedPromise}getExercises(){return this.exercises$}getExerciseById(e){return this.exercises$.pipe(d(),t(r=>r.find(i=>i.id===e)))}addExercise(e){let r=this.exercisesSubject.getValue(),s=E(a({},e),{id:f()}),i=[...r,s];return this.saveExercisesToStorage(i),c(s)}updateExercise(e){let r=this.exercisesSubject.getValue(),s=r.findIndex(i=>i.id===e.id);if(s>-1){let i=[...r];return i[s]=a({},e),this.saveExercisesToStorage(i),c(e)}return u(()=>new Error(`Exercise with id ${e.id} not found for update.`))}deleteExercise(e){return l(this,null,function*(){let r=this.exercisesSubject.getValue();if(!r.find(i=>i.id===e))return console.warn(`ExerciseService: Exercise with id ${e} not found for deletion.`),Promise.reject(new Error("Exercise not found"));try{yield this.trackingService.handleExerciseDeletion(e);let i=r.filter(j=>j.id!==e);this.saveExercisesToStorage(i)}catch(i){throw console.error(`Error during exercise deletion process for ${e}:`,i),i}})}getExercisesByCategory(e){return this.getExercises().pipe(t(r=>r.filter(s=>s.category===e)))}getExercisesByMuscleGroup(e){return this.getExercises().pipe(t(r=>r.filter(s=>s.muscleGroups.includes(e))))}getUniqueCategories(){return this.getExercises().pipe(t(e=>[...new Set(e.map(r=>r.category))]))}getUniquePrimaryMuscleGroups(){return this.getExercises().pipe(t(e=>[...new Set(e.map(r=>r.primaryMuscleGroup))].sort()))}static \u0275fac=function(r){return new(r||n)};static \u0275prov=g({token:n,factory:n.\u0275fac,providedIn:"root"})};export{O as a};
