import{J as v,N as p,Wc as E,Xc as S,Yc as h,d as q,i as a,m as c,rc as f}from"./chunk-QNUYXXK4.js";import{a as u,b as m,g as l}from"./chunk-GAL4ENT6.js";var b=class d{storageService=p(h);toastService=p(E);alertService=p(S);PERSONAL_GYM_STORAGE_KEY="fitTrackPro_personalGym";equipmentSubject=new q(this._loadFromStorage());equipment$=this.equipmentSubject.asObservable();constructor(){}_loadFromStorage(){let t=this.storageService.getItem(this.PERSONAL_GYM_STORAGE_KEY);return t?this._sortEquipment(t):[]}_saveToStorage(t){let e=this._sortEquipment(t);this.storageService.setItem(this.PERSONAL_GYM_STORAGE_KEY,e),this.equipmentSubject.next(e)}_sortEquipment(t){return t.sort((e,i)=>e.category<i.category?-1:e.category>i.category?1:e.name.localeCompare(i.name))}getAllEquipment(){return this.equipment$}getEquipmentById(t){return this.equipment$.pipe(c(e=>e.find(i=>i.id===t)))}addEquipment(t){let e=m(u({},t),{id:f()}),r=[...this.equipmentSubject.getValue(),e];return this._saveToStorage(r),this.toastService.success(`Added "${e.name}" to your gym!`,3e3,"Equipment Added"),e}updateEquipment(t){let e=this.equipmentSubject.getValue(),i=e.findIndex(r=>r.id===t.id);if(i>-1){let r=[...e];r[i]=t,this._saveToStorage(r),this.toastService.success(`Updated "${t.name}" successfully!`,3e3,"Equipment Updated")}else this.toastService.error(`Could not find "${t.name}" to update.`,0,"Update Failed")}deleteEquipment(t){return l(this,null,function*(){let e=this.equipmentSubject.getValue(),i=e.find(n=>n.id===t);if(!i){this.toastService.error("Equipment not found.",0,"Deletion Failed");return}let r=yield this.alertService.showConfirm("Delete Equipment",`Are you sure you want to delete "${i.name}" from your gym? This cannot be undone.`);if(r&&r.data){let n=e.filter(o=>o.id!==t);this._saveToStorage(n),this.toastService.info(`"${i.name}" was deleted.`,3e3,"Deleted")}})}getDataForBackup(){return this.equipmentSubject.getValue()}mergeData(t){if(!Array.isArray(t)){console.error("PersonalGymService: Imported data for equipment is not an array."),this.toastService.error("Import failed: Invalid personal gym data file.",0,"Import Error");return}let e=this.equipmentSubject.getValue(),i=new Map(e.map(s=>[s.id,s])),r=0,n=0;t.forEach(s=>{if(!s.id||!s.name){console.warn("Skipping invalid equipment during import:",s);return}i.has(s.id)?r++:n++,i.set(s.id,s)});let o=Array.from(i.values());this._saveToStorage(o),this.toastService.success(`Gym import complete. ${r} items updated, ${n} added.`,6e3,"Personal Gym Merged")}hideEquipment(t){let e=this.equipmentSubject.getValue(),i=e.findIndex(o=>o.id===t);if(i===-1)return this.toastService.error("Failed to hide equipment: not found.",0,"Error"),a(void 0);let r=[...e],n=m(u({},r[i]),{isHidden:!0});return r[i]=n,this._saveToStorage(r),this.toastService.info(`'${n.name}' is now hidden.`,3e3,"Hidden"),a(n)}unhideEquipment(t){let e=this.equipmentSubject.getValue(),i=e.findIndex(o=>o.id===t);if(i===-1)return this.toastService.error("Failed to un-hide equipment: not found.",0,"Error"),a(void 0);let r=[...e],n=m(u({},r[i]),{isHidden:!1});return r[i]=n,this._saveToStorage(r),this.toastService.success(`'${n.name}' is now visible.`,3e3,"Visible"),a(n)}getHiddenEquipments(){return this.equipmentSubject.asObservable().pipe(c(t=>t.filter(e=>e.isHidden)))}static \u0275fac=function(e){return new(e||d)};static \u0275prov=v({token:d,factory:d.\u0275fac,providedIn:"root"})};export{b as a};
