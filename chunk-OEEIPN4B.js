import{E as w,G as $,I as R,M as j,Mc as k,Nc as L,Oc as M,Pc as F,Q as S,Sc as b,Tc as _,Uc as I,a as m,b as h,g as f,k as D,oc as P,p as y,r as O,s as l,t as A}from"./chunk-SGJTLECR.js";function E(u,...e){let r=b.bind(null,u||e.find(t=>typeof t=="object"));return e.map(r)}function x(u,e){let[r,t]=E(u,e.start,e.end);return{start:r,end:t}}function W(u,e){let{start:r,end:t}=x(e?.in,u),a=+r>+t,o=a?+r:+t,n=a?t:r;n.setHours(0,0,0,0);let i=e?.step??1;if(!i)return[];i<0&&(i=-i,a=!a);let c=[];for(;+n<=o;)c.push(b(r,n)),n.setDate(n.getDate()+i),n.setHours(0,0,0,0);return a?c.reverse():c}function v(u,e){return _(u,e?.in).getDay()}var B=class u{storageService=S(L);workoutService=S(F);alertService=S(k);toastService=S(M);PROGRAMS_STORAGE_KEY="fitTrackPro_trainingPrograms";programsSubject=new D(this._loadProgramsFromStorage());programs$=this.programsSubject.asObservable();isLoadingProgramsSubject=new D(!0);isLoadingPrograms$=this.isLoadingProgramsSubject.asObservable();constructor(){this.isLoadingProgramsSubject.next(!0);let e=this._loadProgramsFromStorage();this.programsSubject=new D(e),this.programs$=this.programsSubject.asObservable().pipe($(1)),this._seedAndMergeProgramsFromStaticData(e)}_loadProgramsFromStorage(){let e=this.storageService.getItem(this.PROGRAMS_STORAGE_KEY);return e||[]}_saveProgramsToStorage(e){this.storageService.setItem(this.PROGRAMS_STORAGE_KEY,e),this.programsSubject.next([...e])}_seedAndMergeProgramsFromStaticData(e){try{let r=[],t=new Set(e.map(o=>o.id)),a=r.filter(o=>!t.has(o.id));if(a.length>0){console.log(`Seeding ${a.length} new training programs from static data`);let o=[...e,...a];this._saveProgramsToStorage(o)}else console.log("No new training programs to seed. All default programs are present in storage")}catch(r){console.error("Failed to process or seed training programs from static data:",r)}finally{this.isLoadingProgramsSubject.next(!1)}}getAllPrograms(){return this.programs$}getProgramsByRoutineId(e){return e?this.programs$.pipe(l(r=>r.filter(t=>t.schedule.some(a=>a.routineId===e)))):y([])}getProgramById(e){return this.programs$.pipe(l(r=>r.find(t=>t.id===e)))}addProgram(e){return f(this,null,function*(){let r=this.programsSubject.getValue(),t=h(m({},e),{id:P(),isActive:!1,schedule:e.schedule.map(o=>h(m({},o),{id:P()}))}),a=[...r,t];return this._saveProgramsToStorage(a),this.toastService.success(`Program "${t.name}" created.`,3e3,"Program Created"),t})}updateProgram(e){return f(this,null,function*(){let r=this.programsSubject.getValue(),t=r.findIndex(a=>a.id===e.id);if(t>-1){let a=e.schedule.map(i=>h(m({},i),{id:i.id||P()})),o=h(m({},e),{schedule:a}),n=[...r];return n[t]=o,this._saveProgramsToStorage(n),this.toastService.success(`Program "${o.name}" updated.`,3e3,"Program Updated"),o}this.toastService.error(`Program with ID ${e.id} not found.`,0,"Update Error")})}deleteProgram(e){return f(this,null,function*(){let r=yield O(this.getProgramById(e).pipe(w(1)));if(!r){this.toastService.error("Program not found",0,"Delete Error");return}let t=yield this.alertService.showConfirm("Delete Program",`Are you sure you want to delete the program "${r.name}"? This action cannot be undone.`,"Delete");if(t&&t.data){let o=this.programsSubject.getValue().filter(n=>n.id!==e);this._saveProgramsToStorage(o),this.toastService.info(`Program "${r.name}" deleted.`,3e3,"Program Deleted")}})}toggleProgramActivation(e){return f(this,null,function*(){let r=this.programsSubject.getValue(),t=r.find(o=>o.id===e);if(!t){this.toastService.error("Program not found to update",0,"Update Error");return}let a=r.map(o=>o.id===e?h(m({},o),{isActive:!o.isActive}):o);this._saveProgramsToStorage(a),t.isActive?this.toastService.info(`Program "${t.name}" has been deactivated.`,3e3,"Program Deactivated"):this.toastService.success(`Program "${t.name}" is now active.`,3e3,"Program Activated")})}deactivateAllPrograms(){return f(this,null,function*(){let e=this.programsSubject.getValue();if(e.length>0){let r=e.map(t=>h(m({},t),{isActive:!1}));this._saveProgramsToStorage(r)}})}deactivateProgram(e){return f(this,null,function*(){let r=this.programsSubject.getValue(),t=r.find(o=>o.id===e);if(!t){this.toastService.error("Program not found to deactivate",0,"Deactivation Error");return}if(!t.isActive){this.toastService.info(`Program "${t.name}" is already inactive.`,3e3,"Already Inactive");return}let a=r.map(o=>o.id===e?h(m({},o),{isActive:!1}):o);this._saveProgramsToStorage(a),this.toastService.info(`Program "${t.name}" has been deactivated.`,3e3,"Program Deactivated")})}getActiveProgram(){return this.programs$.pipe(l(e=>e.find(r=>r.isActive)))}getActivePrograms(){return this.programs$.pipe(l(e=>e.filter(r=>r.isActive)))}getDataForBackup(){return this.programsSubject.getValue()}mergeData(e){if(!Array.isArray(e)){console.error("TrainingProgramService: Imported data for programs is not an array."),this.toastService.error("Import failed: Invalid program data file.",0,"Import Error");return}let r=this.programsSubject.getValue(),t=new Map(r.map(i=>[i.id,i])),a=0,o=0;e.forEach(i=>{if(!i.id||!i.name){console.warn("Skipping invalid program during import:",i);return}t.has(i.id)?a++:o++,t.set(i.id,i)});let n=Array.from(t.values());this._saveProgramsToStorage(n),console.log(`TrainingProgramService: Merged imported data. Updated: ${a}, Added: ${o}`),this.toastService.success(`Import complete. ${a} programs updated, ${o} added.`,6e3,"Programs Merged")}findRoutineForDayInProgram(e,r){if(!r||!r.schedule||r.schedule.length===0)return null;let t;if(r.cycleLength&&r.cycleLength>0&&r.startDate){let a=I(r.startDate);if(e<a)return null;let o=Math.abs(e.getTime()-a.getTime()),i=Math.floor(o/(1e3*60*60*24))%r.cycleLength+1;t=r.schedule.find(c=>c.dayOfWeek===i)}else{let a=v(e);t=r.schedule.find(o=>o.dayOfWeek===a)}if(t){let a=this.workoutService.getRoutineByIdSync(t.routineId);if(a)return{routine:a,scheduledDayInfo:t}}return null}getRoutineForDay(e){return this.getActiveProgram().pipe(R(r=>{if(!r)return y(null);let t;if(r.cycleLength&&r.cycleLength>0&&r.startDate){let o=new Date(r.startDate),n=Math.abs(e.getTime()-o.getTime()),c=Math.floor(n/(1e3*60*60*24))%r.cycleLength+1;t=s=>s.dayOfWeek===Number(c)}else{let o=v(e);t=n=>n.dayOfWeek===Number(o)}let a=r.schedule.find(t);return a?this.workoutService.getRoutineById(a.routineId).pipe(l(o=>o?{routine:o,scheduledDayInfo:a}:(console.warn(`Routine with ID ${a.routineId} not found for scheduled day`),null))):y(null)}))}getScheduledRoutinesForDateRange(e,r){return this.getActiveProgram().pipe(R(t=>{if(!t||!t.schedule||t.schedule.length===0)return y([]);let a=[],o=new Date(e);for(;o<=r;){let n,i=new Date(o);if(t.cycleLength&&t.cycleLength>0&&t.startDate){let s=new Date(t.startDate),d=Math.abs(i.getTime()-s.getTime()),g=i>=s?Math.floor(d/(1e3*60*60*24)):-1;if(g>=0){let p=g%t.cycleLength+1;n=T=>T.dayOfWeek===p}else n=()=>!1}else{let s=v(i);n=d=>d.dayOfWeek===s}let c=t.schedule.find(n);c&&a.push(this.workoutService.getRoutineById(c.routineId).pipe(l(s=>s?{date:i,routine:s,scheduledDayInfo:c}:null))),o.setDate(o.getDate()+1)}return a.length===0?y([]):A(a).pipe(l(n=>n.filter(i=>i!==null)))}))}getScheduledRoutinesForDateRangeByProgramId(e,r,t){return this.getProgramById(e).pipe(l(a=>{if(!a||!a.schedule||a.schedule.length===0)return[];let o=W({start:r,end:t}),n=[],i=a.cycleLength&&a.cycleLength>0?a.cycleLength:7,c=a.startDate?I(a.startDate):new Date(1970,0,1),s=new Map;return a.schedule.forEach(d=>{let g=d.dayOfWeek%i;s.has(g)||s.set(g,[]),s.get(g).push(d)}),o.forEach(d=>{if(!(d<c))if(i===7){let g=v(d);s.has(g)&&s.get(g).forEach(p=>{n.push({date:d,scheduledDayInfo:p})})}else{let p=Math.floor((d.getTime()-c.getTime())/864e5)%i;s.has(p)&&s.get(p).forEach(T=>{n.push({date:d,scheduledDayInfo:T})})}}),n}))}static \u0275fac=function(r){return new(r||u)};static \u0275prov=j({token:u,factory:u.\u0275fac,providedIn:"root"})};export{E as a,W as b,B as c};
