import{b as E}from"./chunk-ZM4QULW4.js";import{E as A,G as w,I as T,M as $,Mc as j,Nc as k,Oc as L,Pc as M,Q as S,Tc as _,Uc as R,a as l,b as m,g as h,k as P,p as y,pc as D,r as I,s as g,t as O}from"./chunk-CLMKBKRP.js";function v(p,e){return _(p,e?.in).getDay()}var F=class p{storageService=S(k);workoutService=S(M);alertService=S(j);toastService=S(L);PROGRAMS_STORAGE_KEY="fitTrackPro_trainingPrograms";programsSubject=new P(this._loadProgramsFromStorage());programs$=this.programsSubject.asObservable();isLoadingProgramsSubject=new P(!0);isLoadingPrograms$=this.isLoadingProgramsSubject.asObservable();constructor(){this.isLoadingProgramsSubject.next(!0);let e=this._loadProgramsFromStorage();this.programsSubject=new P(e),this.programs$=this.programsSubject.asObservable().pipe(w(1)),this._seedAndMergeProgramsFromStaticData(e)}_loadProgramsFromStorage(){let e=this.storageService.getItem(this.PROGRAMS_STORAGE_KEY);return e||[]}_saveProgramsToStorage(e){this.storageService.setItem(this.PROGRAMS_STORAGE_KEY,e),this.programsSubject.next([...e])}_seedAndMergeProgramsFromStaticData(e){try{let r=[],t=new Set(e.map(a=>a.id)),i=r.filter(a=>!t.has(a.id));if(i.length>0){console.log(`Seeding ${i.length} new training programs from static data.`);let a=[...e,...i];this._saveProgramsToStorage(a)}else console.log("No new training programs to seed. All default programs are present in storage.")}catch(r){console.error("Failed to process or seed training programs from static data:",r)}finally{this.isLoadingProgramsSubject.next(!1)}}getAllPrograms(){return this.programs$}getProgramsByRoutineId(e){return e?this.programs$.pipe(g(r=>r.filter(t=>t.schedule.some(i=>i.routineId===e)))):y([])}getProgramById(e){return this.programs$.pipe(g(r=>r.find(t=>t.id===e)))}addProgram(e){return h(this,null,function*(){let r=this.programsSubject.getValue(),t=m(l({},e),{id:D(),isActive:!1,schedule:e.schedule.map(a=>m(l({},a),{id:D()}))}),i=[...r,t];return this._saveProgramsToStorage(i),this.toastService.success(`Program "${t.name}" created.`,3e3,"Program Created"),t})}updateProgram(e){return h(this,null,function*(){let r=this.programsSubject.getValue(),t=r.findIndex(i=>i.id===e.id);if(t>-1){let i=e.schedule.map(o=>m(l({},o),{id:o.id||D()})),a=m(l({},e),{schedule:i}),n=[...r];return n[t]=a,this._saveProgramsToStorage(n),this.toastService.success(`Program "${a.name}" updated.`,3e3,"Program Updated"),a}this.toastService.error(`Program with ID ${e.id} not found.`,0,"Update Error")})}deleteProgram(e){return h(this,null,function*(){let r=yield I(this.getProgramById(e).pipe(A(1)));if(!r){this.toastService.error("Program not found.",0,"Delete Error");return}let t=yield this.alertService.showConfirm("Delete Program",`Are you sure you want to delete the program "${r.name}"? This action cannot be undone.`,"Delete");if(t&&t.data){let a=this.programsSubject.getValue().filter(n=>n.id!==e);this._saveProgramsToStorage(a),this.toastService.info(`Program "${r.name}" deleted.`,3e3,"Program Deleted")}})}toggleProgramActivation(e){return h(this,null,function*(){let r=this.programsSubject.getValue(),t=r.find(a=>a.id===e);if(!t){this.toastService.error("Program not found to update.",0,"Update Error");return}let i=r.map(a=>a.id===e?m(l({},a),{isActive:!a.isActive}):a);this._saveProgramsToStorage(i),t.isActive?this.toastService.info(`Program "${t.name}" has been deactivated.`,3e3,"Program Deactivated"):this.toastService.success(`Program "${t.name}" is now active.`,3e3,"Program Activated")})}deactivateAllPrograms(){return h(this,null,function*(){let e=this.programsSubject.getValue();if(e.length>0){let r=e.map(t=>m(l({},t),{isActive:!1}));this._saveProgramsToStorage(r)}})}deactivateProgram(e){return h(this,null,function*(){let r=this.programsSubject.getValue(),t=r.find(a=>a.id===e);if(!t){this.toastService.error("Program not found to deactivate.",0,"Deactivation Error");return}if(!t.isActive){this.toastService.info(`Program "${t.name}" is already inactive.`,3e3,"Already Inactive");return}let i=r.map(a=>a.id===e?m(l({},a),{isActive:!1}):a);this._saveProgramsToStorage(i),this.toastService.info(`Program "${t.name}" has been deactivated.`,3e3,"Program Deactivated")})}getActiveProgram(){return this.programs$.pipe(g(e=>e.find(r=>r.isActive)))}getActivePrograms(){return this.programs$.pipe(g(e=>e.filter(r=>r.isActive)))}getDataForBackup(){return this.programsSubject.getValue()}mergeData(e){if(!Array.isArray(e)){console.error("TrainingProgramService: Imported data for programs is not an array."),this.toastService.error("Import failed: Invalid program data file.",0,"Import Error");return}let r=this.programsSubject.getValue(),t=new Map(r.map(o=>[o.id,o])),i=0,a=0;e.forEach(o=>{if(!o.id||!o.name){console.warn("Skipping invalid program during import:",o);return}t.has(o.id)?i++:a++,t.set(o.id,o)});let n=Array.from(t.values());this._saveProgramsToStorage(n),console.log(`TrainingProgramService: Merged imported data. Updated: ${i}, Added: ${a}.`),this.toastService.success(`Import complete. ${i} programs updated, ${a} added.`,6e3,"Programs Merged")}findRoutineForDayInProgram(e,r){if(!r||!r.schedule||r.schedule.length===0)return null;let t;if(r.cycleLength&&r.cycleLength>0&&r.startDate){let i=R(r.startDate);if(e<i)return null;let a=Math.abs(e.getTime()-i.getTime()),o=Math.floor(a/(1e3*60*60*24))%r.cycleLength+1;t=r.schedule.find(d=>d.dayOfWeek===o)}else{let i=v(e);t=r.schedule.find(a=>a.dayOfWeek===i)}if(t){let i=this.workoutService.getRoutineByIdSync(t.routineId);if(i)return{routine:i,scheduledDayInfo:t}}return null}getRoutineForDay(e){return this.getActiveProgram().pipe(T(r=>{if(!r)return y(null);let t;if(r.cycleLength&&r.cycleLength>0&&r.startDate){let a=new Date(r.startDate),n=Math.abs(e.getTime()-a.getTime()),d=Math.floor(n/(1e3*60*60*24))%r.cycleLength+1;t=s=>s.dayOfWeek===Number(d)}else{let a=v(e);t=n=>n.dayOfWeek===Number(a)}let i=r.schedule.find(t);return i?this.workoutService.getRoutineById(i.routineId).pipe(g(a=>a?{routine:a,scheduledDayInfo:i}:(console.warn(`Routine with ID ${i.routineId} not found for scheduled day.`),null))):y(null)}))}getScheduledRoutinesForDateRange(e,r){return this.getActiveProgram().pipe(T(t=>{if(!t||!t.schedule||t.schedule.length===0)return y([]);let i=[],a=new Date(e);for(;a<=r;){let n,o=new Date(a);if(t.cycleLength&&t.cycleLength>0&&t.startDate){let s=new Date(t.startDate),c=Math.abs(o.getTime()-s.getTime()),u=o>=s?Math.floor(c/(1e3*60*60*24)):-1;if(u>=0){let f=u%t.cycleLength+1;n=b=>b.dayOfWeek===f}else n=()=>!1}else{let s=v(o);n=c=>c.dayOfWeek===s}let d=t.schedule.find(n);d&&i.push(this.workoutService.getRoutineById(d.routineId).pipe(g(s=>s?{date:o,routine:s,scheduledDayInfo:d}:null))),a.setDate(a.getDate()+1)}return i.length===0?y([]):O(i).pipe(g(n=>n.filter(o=>o!==null)))}))}getScheduledRoutinesForDateRangeByProgramId(e,r,t){return this.getProgramById(e).pipe(g(i=>{if(!i||!i.schedule||i.schedule.length===0)return[];let a=E({start:r,end:t}),n=[],o=i.cycleLength&&i.cycleLength>0?i.cycleLength:7,d=i.startDate?R(i.startDate):new Date(1970,0,1),s=new Map;return i.schedule.forEach(c=>{let u=c.dayOfWeek%o;s.has(u)||s.set(u,[]),s.get(u).push(c)}),a.forEach(c=>{if(!(c<d))if(o===7){let u=v(c);s.has(u)&&s.get(u).forEach(f=>{n.push({date:c,scheduledDayInfo:f})})}else{let f=Math.floor((c.getTime()-d.getTime())/864e5)%o;s.has(f)&&s.get(f).forEach(b=>{n.push({date:c,scheduledDayInfo:b})})}}),n}))}static \u0275fac=function(r){return new(r||p)};static \u0275prov=$({token:p,factory:p.\u0275fac,providedIn:"root"})};export{F as a};
