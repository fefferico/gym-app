import{D as I,Fc as S,L as w,Mb as p,O as P,P as v,W as E,Y as k,a as d,ac as L,b as h,ba as B,g,k as _,o as y,r as m,rb as D,xc as A,yc as x,zc as F}from"./chunk-WC2MP2WO.js";var j=999,R=class i{storageService=v(x);alertService=v(A);workoutService=v(F);WORKOUT_LOGS_STORAGE_KEY="fitTrackPro_workoutLogs";PERSONAL_BESTS_STORAGE_KEY="fitTrackPro_personalBests";workoutLogsSubject=new _(this.loadWorkoutLogsFromStorage());workoutLogs$=this.workoutLogsSubject.asObservable();personalBestsSubject=new _(this.loadPBsFromStorage());personalBests$=this.personalBestsSubject.asObservable();constructor(){}loadWorkoutLogsFromStorage(){let e=this.storageService.getItem(this.WORKOUT_LOGS_STORAGE_KEY);return e?e.sort((t,s)=>new Date(s.date).getTime()-new Date(t.date).getTime()):[]}saveWorkoutLogsToStorage(e){this.storageService.setItem(this.WORKOUT_LOGS_STORAGE_KEY,e),this.workoutLogsSubject.next([...e].sort((t,s)=>new Date(s.date).getTime()-new Date(t.date).getTime()))}addWorkoutLog(e){let t=L(),s=this.workoutLogsSubject.getValue(),n=new Date(e.startTime).toISOString(),o=e.exercises.map(l=>h(d({},l),{workoutLogId:t,sets:l.sets.map(c=>h(d({},c),{id:c.id??L(),workoutLogId:t,timestamp:n,exerciseId:l.exerciseId}))})),r=h(d({},e),{exercises:o,id:t,date:n.split("T")[0]});r.startTime&&r.endTime&&!r.durationMinutes&&(r.durationMinutes=Math.round((r.endTime-r.startTime)/(1e3*60)),r.durationSeconds=Math.round((r.endTime-r.startTime)/1e3));let a=[r,...s];return this.saveWorkoutLogsToStorage(a),this.updateAllPersonalBestsFromLog(r),console.log("Added workout log:",r.id),r}getWorkoutLogById(e){return this.workoutLogs$.pipe(m(t=>t.find(s=>s.id===e)))}clearAllWorkoutLogs_DEV_ONLY(){return this.alertService.showConfirm("Info","DEVELOPMENT: Are you sure you want to delete ALL workout logs? This cannot be undone.").then(e=>g(this,null,function*(){e&&e.data&&(this.saveWorkoutLogsToStorage([]),yield this.recalculateAllPersonalBests(),yield this.alertService.showAlert("Info","All workout logs cleared!"))}))}getLastPerformanceForExercise(e){return this.workoutLogs$.pipe(m(t=>{for(let s of t){let n=s.exercises.find(o=>o.exerciseId===e);if(n&&n.sets.length>0)return{lastPerformedDate:s.date,workoutLogId:s.id,sets:[...n.sets]}}return null}))}findPreviousSetPerformance(e,t,s){return!e||!e.sets||e.sets.length===0?null:s<e.sets.length?e.sets[s]:null}loadPBsFromStorage(){return this.storageService.getItem(this.PERSONAL_BESTS_STORAGE_KEY)||{}}savePBsToStorage(e){this.storageService.setItem(this.PERSONAL_BESTS_STORAGE_KEY,e),this.personalBestsSubject.next(d({},e))}updateAllPersonalBestsFromLog(e){let t=d({},this.personalBestsSubject.getValue());e.exercises.forEach(s=>{t[s.exerciseId]||(t[s.exerciseId]=[]);let n=t[s.exerciseId];s.sets.forEach(o=>{let r=d({},o);if(r.weightUsed===void 0||r.weightUsed===null||r.weightUsed===0){r.repsAchieved>0&&this.updateSpecificPB(n,r,"Max Reps (Bodyweight)"),r.durationPerformed&&r.durationPerformed>0&&this.updateSpecificPB(n,r,"Max Duration");return}if(r.repsAchieved===1&&this.updateSpecificPB(n,r,"1RM (Actual)"),r.repsAchieved===3&&this.updateSpecificPB(n,r,"3RM (Actual)"),r.repsAchieved===5&&this.updateSpecificPB(n,r,"5RM (Actual)"),this.updateSpecificPB(n,r,"Heaviest Lifted"),r.repsAchieved>1){let a=r.weightUsed*(1+r.repsAchieved/30),l=h(d({},r),{repsAchieved:1,weightUsed:parseFloat(a.toFixed(2))});this.updateSpecificPB(n,l,"1RM (Estimated)")}}),t[s.exerciseId]=n.sort((o,r)=>(r.weightUsed??0)-(o.weightUsed??0))}),this.savePBsToStorage(t)}updateSpecificPB(e,t,s){if(!t.timestamp||!t.workoutLogId||!t.exerciseId){console.warn("PB Candidate set is missing critical context (timestamp, workoutLogId, or exerciseId):",t,"for pbType:",s);return}let n=h(d({},t),{pbType:s,history:[]}),o=e.findIndex(l=>l.pbType===s),r=!1,a;if(o>-1){let l=e[o],c=!1;if(s.includes("Max Reps")?(t.repsAchieved>l.repsAchieved||t.repsAchieved===l.repsAchieved&&(t.weightUsed??-1)>(l.weightUsed??-1))&&(c=!0):s.includes("Max Duration")?(t.durationPerformed??0)>(l.durationPerformed??0)&&(c=!0):((t.weightUsed??-1)>(l.weightUsed??-1)||(t.weightUsed??-1)===(l.weightUsed??-1)&&new Date(t.timestamp).getTime()>new Date(l.timestamp).getTime())&&(c=!0),c){r=!0,a=d({},l);let u={weightUsed:a.weightUsed,repsAchieved:a.repsAchieved,durationPerformed:a.durationPerformed,timestamp:a.timestamp,workoutLogId:a.workoutLogId};n.history=[u,...a.history||[]].slice(0,j),e[o]=n}}else r=!0,e.push(n)}recalculateAllPersonalBests(){return g(this,null,function*(){let e=yield this.alertService.showConfirm("Confirm Recalculation","Recalculate all personal bests from your entire workout history? This may take a moment.");if(!e||!e.data)return;this.savePBsToStorage({});let s=[...this.workoutLogsSubject.getValue()].sort((o,r)=>new Date(o.date).getTime()-new Date(r.date).getTime());if(!s||s.length===0)return this.alertService.showAlert("Info","There are no personal bests to be recalculated."),Promise.resolve();let n={};s.forEach(o=>{let r=new Date(o.startTime).toISOString();o.exercises.forEach(a=>{n[a.exerciseId]||(n[a.exerciseId]=[]);let l=n[a.exerciseId];a.sets.forEach(c=>{let u=h(d({},c),{timestamp:c.timestamp||r,workoutLogId:c.workoutLogId||o.id,exerciseId:c.exerciseId||a.exerciseId});if(u.weightUsed===void 0||u.weightUsed===null||u.weightUsed===0){u.repsAchieved>0&&this.updateSpecificPB(l,u,"Max Reps (Bodyweight)"),u.durationPerformed&&u.durationPerformed>0&&this.updateSpecificPB(l,u,"Max Duration");return}if(u.repsAchieved===1&&this.updateSpecificPB(l,u,"1RM (Actual)"),u.repsAchieved===3&&this.updateSpecificPB(l,u,"3RM (Actual)"),u.repsAchieved===5&&this.updateSpecificPB(l,u,"5RM (Actual)"),this.updateSpecificPB(l,u,"Heaviest Lifted"),u.repsAchieved>1){let M=u.weightUsed*(1+u.repsAchieved/30),W=h(d({},u),{repsAchieved:1,weightUsed:parseFloat(M.toFixed(2))});this.updateSpecificPB(l,W,"1RM (Estimated)")}})})});for(let o in n)n.hasOwnProperty(o)&&n[o].sort((r,a)=>(a.weightUsed??0)-(r.weightUsed??0));this.savePBsToStorage(n),console.log("Personal Bests recalculated from all logs:",n),this.alertService.showAlert("Success","All personal bests have been recalculated.")})}getPersonalBestForExerciseByType(e,t){return this.personalBests$.pipe(m(s=>s[e]?.find(n=>n.pbType===t)||null))}getAllPersonalBestsForExercise(e){return this.personalBests$.pipe(m(t=>t[e]||[]))}getAllPersonalWorkouts(){return this.workoutLogs$}clearAllPersonalBests_DEV_ONLY(){return this.alertService.showConfirm("Info","DEVELOPMENT: Are you sure you want to delete ALL personal bests? This cannot be undone.").then(e=>g(this,null,function*(){e&&e.data&&(this.savePBsToStorage({}),yield this.alertService.showAlert("Info","All personal bests cleared!"))}))}getExercisePerformanceHistory(e){return this.workoutLogs$.pipe(m(t=>{let s=[];return t.filter(o=>o.exercises.some(r=>r.exerciseId===e)).sort((o,r)=>S(o.date).getTime()-S(r.date).getTime()).forEach(o=>{let r,a;o.exercises.forEach(l=>{l.exerciseId===e&&l.sets.forEach(c=>{c.weightUsed!==void 0&&c.weightUsed!==null&&(r===void 0||c.weightUsed>r?(r=c.weightUsed,a=c.repsAchieved):c.weightUsed===r&&(a===void 0||c.repsAchieved>a)&&(a=c.repsAchieved))})}),r!==void 0&&s.push({date:S(o.date),value:r,reps:a,logId:o.id})}),s}))}getLogsForBackup(){return this.workoutLogsSubject.getValue()}getPBsForBackup(){return this.personalBestsSubject.getValue()}replaceLogs(e){if(!Array.isArray(e)){console.error("TrackingService: Imported data for logs is not an array.");return}this.saveWorkoutLogsToStorage(e),this.recalculateAllPersonalBests(),console.log("TrackingService: Logs replaced, PBs recalculated.")}replacePBs(e){if(typeof e!="object"||e===null||Array.isArray(e)){console.error("TrackingService: Imported data for PBs is not an object.");return}this.savePBsToStorage(e),console.log("TrackingService: PBs replaced with imported data.")}getWorkoutLogsByRoutineId(e){return e?this.workoutLogs$.pipe(m(t=>t.filter(s=>s.routineId===e))):y([])}clearWorkoutLogsByRoutineId(e){return g(this,null,function*(){if(!e)return this.alertService.showAlert("Warning","No routine ID provided to clear logs."),!1;let t=this.workoutLogsSubject.getValue(),s=t.filter(r=>r.routineId!==e),n=t.length-s.length,o="";try{o=(yield this.workoutService.getRoutineById(e).pipe(I(1)).toPromise())?.name||"Unknown Routine"}catch{console.warn("Could not fetch routine name")}if(n===0){let r=yield this.alertService.showConfirm("Confirm Deletion",`Are you sure you want to delete the routine "${o}"? This action cannot be undone.`);return r&&r.data?(yield this.workoutService.deleteRoutine(e),this.alertService.showAlert("Info",`Routine "${o}" deleted successfully!`),!0):!1}else{let r=yield this.alertService.showConfirm("Confirm Deletion",`Are you sure you want to delete the routine "${o}"? There are ${n} workout log(s) associated with it. Deleting the routine will also delete these logs. This action cannot be undone.`);return r&&r.data?(this.saveWorkoutLogsToStorage(s),yield this.workoutService.deleteRoutine(e),yield this.recalculateAllPersonalBests(),this.alertService.showAlert("Success",`${n} workout log(s) and the routine "${o}" have been deleted.`),!0):!1}})}updateWorkoutLog(e){return g(this,null,function*(){if(!e||!e.id)throw console.error("TrackingService: updateWorkoutLog called with invalid data or missing ID."),new Error("Invalid log data for update.");let t=this.workoutLogsSubject.getValue(),s=t.findIndex(n=>n.id===e.id);if(s>-1){let n=new Date(e.startTime).toISOString(),o=e.exercises.map(l=>h(d({},l),{sets:l.sets.map(c=>h(d({},c),{timestamp:c.timestamp||n,workoutLogId:c.workoutLogId||e.id,exerciseId:c.exerciseId||l.exerciseId}))})),r=h(d({},e),{exercises:o}),a=[...t];a[s]=r,this.saveWorkoutLogsToStorage(a),yield this.recalculateAllPersonalBests(),console.log("Updated workout log and recalculated PBs:",e.id)}else throw console.error(`TrackingService: WorkoutLog with ID ${e.id} not found for update.`),new Error(`WorkoutLog with ID ${e.id} not found.`)})}handleExerciseDeletion(e){return g(this,null,function*(){console.log(`Handling deletion repercussions for exercise ID: ${e}`);let t=this.workoutLogsSubject.getValue(),s=!1,n=t.map(o=>{let r=o.exercises.length,a=o.exercises.filter(l=>l.exerciseId!==e);return a.length<r?(s=!0,a.length===0?(console.log(`Workout log ${o.id} will be deleted as it becomes empty.`),null):h(d({},o),{exercises:a})):o}).filter(o=>o!==null);(s||t.length!==n.length)&&(console.log("Some workout logs were modified or deleted due to exercise deletion."),this.saveWorkoutLogsToStorage(n)),console.log("Recalculating PBs after exercise deletion."),yield this.recalculateAllPersonalBests()})}deleteWorkoutLog(e){return g(this,null,function*(){if(!e)throw new Error("Invalid log ID for deletion.");let t=this.workoutLogsSubject.getValue();if(!t.some(o=>o.id===e)){console.warn(`TrackingService: WorkoutLog with ID ${e} not found for deletion.`);return}let n=t.filter(o=>o.id!==e);this.saveWorkoutLogsToStorage(n),console.log(`Workout log with ID ${e} deleted. Recalculating PBs...`),yield this.recalculateAllPersonalBests()})}getWorkoutLogsByProgramIdForDateRange(e,t,s){return!e||!t||!s?y([]):this.workoutLogs$.pipe(m(n=>n.filter(o=>{let r=S(o.date);return o.programId===e&&r>=t&&r<=s})))}static \u0275fac=function(t){return new(t||i)};static \u0275prov=w({token:i,factory:i.\u0275fac,providedIn:"root"})};var O=class i{constructor(e,t){this.document=e;this.platformId=t;p(this.platformId)&&(this.isDarkTheme.set(this.getInitialThemeFromBrowser()),this.isMenuModeCompact.set(this.getInitialMenuModeFromBrowser())),D(()=>{let s=this.isDarkTheme(),n=this.isMenuModeCompact();p(this.platformId)&&(localStorage.setItem(this.THEME_KEY,s?"dark":"light"),localStorage.setItem(this.MENU_MODE_KEY,n?"true":"false"),s?this.document.documentElement.classList.add("dark"):this.document.documentElement.classList.remove("dark"))})}THEME_KEY="fitTrackPro-theme";MENU_MODE_KEY="fitTrackPro-menuMode";isDarkTheme=k(!1);isMenuModeCompact=k(!1);getInitialThemeFromBrowser(){let e=localStorage.getItem(this.THEME_KEY);return e?e==="dark":window.matchMedia?.("(prefers-color-scheme: dark)").matches??!1}getInitialMenuModeFromBrowser(){let e=localStorage.getItem(this.MENU_MODE_KEY);return e?e==="true":!1}toggleTheme(){p(this.platformId)?this.isDarkTheme.update(e=>!e):console.warn("ThemeService: toggleTheme called in non-browser environment. No action taken.")}toggleMenuMode(){p(this.platformId)?this.isMenuModeCompact.update(e=>!e):console.warn("ThemeService: toggleMenuMode called in non-browser environment. No action taken.")}static \u0275fac=function(t){return new(t||i)(P(E),P(B))};static \u0275prov=w({token:i,factory:i.\u0275fac,providedIn:"root"})};var f=function(i){return i[i.State=0]="State",i[i.Transition=1]="Transition",i[i.Sequence=2]="Sequence",i[i.Group=3]="Group",i[i.Animate=4]="Animate",i[i.Keyframes=5]="Keyframes",i[i.Style=6]="Style",i[i.Trigger=7]="Trigger",i[i.Reference=8]="Reference",i[i.AnimateChild=9]="AnimateChild",i[i.AnimateRef=10]="AnimateRef",i[i.Query=11]="Query",i[i.Stagger=12]="Stagger",i}(f||{}),C="*";function $(i,e){return{type:f.Trigger,name:i,definitions:e,options:{}}}function K(i,e=null){return{type:f.Animate,styles:e,timings:i}}function N(i,e=null){return{type:f.Group,steps:i,options:e}}function fe(i,e=null){return{type:f.Sequence,steps:i,options:e}}function Y(i){return{type:f.Style,styles:i,offset:null}}function G(i,e,t){return{type:f.State,name:i,styles:e,options:t}}function V(i,e,t=null){return{type:f.Transition,expr:i,animation:e,options:t}}function H(i,e,t=null){return{type:f.Query,selector:i,animation:e,options:t}}var T=class{_onDoneFns=[];_onStartFns=[];_onDestroyFns=[];_originalOnDoneFns=[];_originalOnStartFns=[];_started=!1;_destroyed=!1;_finished=!1;_position=0;parentPlayer=null;totalTime;constructor(e=0,t=0){this.totalTime=e+t}_onFinish(){this._finished||(this._finished=!0,this._onDoneFns.forEach(e=>e()),this._onDoneFns=[])}onStart(e){this._originalOnStartFns.push(e),this._onStartFns.push(e)}onDone(e){this._originalOnDoneFns.push(e),this._onDoneFns.push(e)}onDestroy(e){this._onDestroyFns.push(e)}hasStarted(){return this._started}init(){}play(){this.hasStarted()||(this._onStart(),this.triggerMicrotask()),this._started=!0}triggerMicrotask(){queueMicrotask(()=>this._onFinish())}_onStart(){this._onStartFns.forEach(e=>e()),this._onStartFns=[]}pause(){}restart(){}finish(){this._onFinish()}destroy(){this._destroyed||(this._destroyed=!0,this.hasStarted()||this._onStart(),this.finish(),this._onDestroyFns.forEach(e=>e()),this._onDestroyFns=[])}reset(){this._started=!1,this._finished=!1,this._onStartFns=this._originalOnStartFns,this._onDoneFns=this._originalOnDoneFns}setPosition(e){this._position=this.totalTime?e*this.totalTime:1}getPosition(){return this.totalTime?this._position/this.totalTime:1}triggerCallback(e){let t=e=="start"?this._onStartFns:this._onDoneFns;t.forEach(s=>s()),t.length=0}},b=class{_onDoneFns=[];_onStartFns=[];_finished=!1;_started=!1;_destroyed=!1;_onDestroyFns=[];parentPlayer=null;totalTime=0;players;constructor(e){this.players=e;let t=0,s=0,n=0,o=this.players.length;o==0?queueMicrotask(()=>this._onFinish()):this.players.forEach(r=>{r.onDone(()=>{++t==o&&this._onFinish()}),r.onDestroy(()=>{++s==o&&this._onDestroy()}),r.onStart(()=>{++n==o&&this._onStart()})}),this.totalTime=this.players.reduce((r,a)=>Math.max(r,a.totalTime),0)}_onFinish(){this._finished||(this._finished=!0,this._onDoneFns.forEach(e=>e()),this._onDoneFns=[])}init(){this.players.forEach(e=>e.init())}onStart(e){this._onStartFns.push(e)}_onStart(){this.hasStarted()||(this._started=!0,this._onStartFns.forEach(e=>e()),this._onStartFns=[])}onDone(e){this._onDoneFns.push(e)}onDestroy(e){this._onDestroyFns.push(e)}hasStarted(){return this._started}play(){this.parentPlayer||this.init(),this._onStart(),this.players.forEach(e=>e.play())}pause(){this.players.forEach(e=>e.pause())}restart(){this.players.forEach(e=>e.restart())}finish(){this._onFinish(),this.players.forEach(e=>e.finish())}destroy(){this._onDestroy()}_onDestroy(){this._destroyed||(this._destroyed=!0,this._onFinish(),this.players.forEach(e=>e.destroy()),this._onDestroyFns.forEach(e=>e()),this._onDestroyFns=[])}reset(){this.players.forEach(e=>e.reset()),this._destroyed=!1,this._finished=!1,this._started=!1}setPosition(e){let t=e*this.totalTime;this.players.forEach(s=>{let n=s.totalTime?Math.min(1,t/s.totalTime):1;s.setPosition(n)})}getPosition(){let e=this.players.reduce((t,s)=>t===null||s.totalTime>t.totalTime?s:t,null);return e!=null?e.getPosition():0}beforeDestroy(){this.players.forEach(e=>{e.beforeDestroy&&e.beforeDestroy()})}triggerCallback(e){let t=e=="start"?this._onStartFns:this._onDoneFns;t.forEach(s=>s()),t.length=0}},q="!";export{f as a,C as b,$ as c,K as d,N as e,fe as f,Y as g,G as h,V as i,H as j,T as k,b as l,q as m,R as n,O as o};
