import{a as j}from"./chunk-QBJGFNKQ.js";import{A as u,Ec as G,Fa as l,Fb as w,Ga as a,Gb as C,Gc as q,Ha as i,Hb as _,Ia as c,Jc as R,Mb as E,Mc as $,Na as b,P as p,Sb as I,Za as r,_ as g,ab as h,ac as L,cc as F,ib as v,ic as M,jc as m,kc as k,la as d,lc as T,nb as A,ob as x,pc as N,qc as O,tc as B,ua as f,vb as S,wc as K,xc as P,yc as D,za as s,zc as V}from"./chunk-3G6ZOTTQ.js";import"./chunk-GAL4ENT6.js";var y=n=>({"input-invalid":n});function U(n,t){n&1&&(a(0,"span"),r(1,"Log an Activity"),i())}function z(n,t){n&1&&(a(0,"span"),r(1,"Edit Activity Log"),i())}function Y(n,t){n&1&&(a(0,"span"),r(1,"Record any physical activity you've done."),i())}function J(n,t){n&1&&(a(0,"span"),r(1,"Update the details of your logged activity."),i())}function Q(n,t){if(n&1&&(a(0,"option",27),r(1),i()),n&2){let e=t.$implicit;l("value",e.id),d(),h(" ",e.name," (",e.category,") ")}}function W(n,t){n&1&&(a(0,"div",28),r(1," Please select an activity. "),i())}function X(n,t){n&1&&(a(0,"div",28),r(1," A valid date is required. "),i())}function Z(n,t){n&1&&(a(0,"div",28),r(1," Please enter a valid duration. "),i())}function tt(n,t){n&1&&(a(0,"div")(1,"label",29),r(2,"Distance (km)"),i(),c(3,"input",30),i())}function et(n,t){n&1&&(a(0,"div")(1,"label",31),r(2,"Calories Burned (optional)"),i(),c(3,"input",32),i())}function it(n,t){n&1&&(a(0,"span"),r(1,"LOG ACTIVITY"),i())}function nt(n,t){n&1&&(a(0,"span"),r(1,"UPDATE LOG"),i())}var H=class n{fb=p(G);activityService=p(j);toastService=p($);router=p(F);route=p(L);logActivityForm;availableActivities$;selectedActivity=g(null);isEditMode=g(!1);editingLogId=null;constructor(){this.logActivityForm=this.fb.group({activityId:["",[m.required]],date:[new Date().toISOString().split("T")[0],[m.required]],durationMinutes:[null,[m.required,m.min(1)]],intensity:["Medium",[m.required]],distanceKm:[{value:null,disabled:!0},[m.min(0)]],caloriesBurned:[{value:null,disabled:!0},[m.min(0)]],notes:[""]}),this.availableActivities$=this.activityService.getActivities(),S(()=>{this.updateFormForSelectedActivity(this.selectedActivity())})}ngOnInit(){this.route.paramMap.pipe(u(1)).subscribe(t=>{let e=t.get("id");e&&(this.isEditMode.set(!0),this.editingLogId=e,this.loadLogForEditing(e))}),this.logActivityForm.get("activityId")?.valueChanges.subscribe(t=>{let e=this.activityService.getActivityById(t);this.selectedActivity.set(e||null)})}loadLogForEditing(t){this.activityService.getActivityLogById(t).pipe(u(1)).subscribe(e=>{e?this.logActivityForm.patchValue({activityId:e.activityId,date:e.date,durationMinutes:e.durationMinutes,intensity:e.intensity,distanceKm:e.distanceKm,caloriesBurned:e.caloriesBurned,notes:e.notes}):(this.toastService.error("Could not find the activity log to edit.",0),this.router.navigate(["/history"]))})}updateFormForSelectedActivity(t){if(!t){this.logActivityForm.get("distanceKm")?.disable(),this.logActivityForm.get("caloriesBurned")?.disable();return}this.logActivityForm.get("intensity")?.setValue(t.intensity,{emitEvent:!1});let e=t.defaultTrackingMetrics;e.distance?this.logActivityForm.get("distanceKm")?.enable():this.logActivityForm.get("distanceKm")?.disable(),e.calories?this.logActivityForm.get("caloriesBurned")?.enable():this.logActivityForm.get("caloriesBurned")?.disable()}onSubmit(){if(this.logActivityForm.invalid){this.toastService.error("Please fill out all required fields.",0,"Invalid Form"),Object.values(this.logActivityForm.controls).forEach(t=>{t.markAsTouched()});return}this.isEditMode()?this.updateLog():this.createLog()}createLog(){let t=this.logActivityForm.getRawValue(),e=this.selectedActivity();if(!e)return;let o={activityId:e.id,activityName:e.name,date:t.date,startTime:new Date(t.date).getTime(),durationMinutes:t.durationMinutes,intensity:t.intensity,distanceKm:t.distanceKm,caloriesBurned:t.caloriesBurned,notes:t.notes};this.activityService.addActivityLog(o),this.router.navigate(["/history"])}updateLog(){if(!this.editingLogId)return;let t=this.logActivityForm.getRawValue(),e=this.selectedActivity();if(!e)return;let o={id:this.editingLogId,activityId:e.id,activityName:e.name,date:t.date,startTime:new Date(t.date).getTime(),durationMinutes:t.durationMinutes,intensity:t.intensity,distanceKm:t.distanceKm,caloriesBurned:t.caloriesBurned,notes:t.notes};this.activityService.updateActivityLog(o),this.router.navigate(["/activities/log",this.editingLogId])}get f(){return this.logActivityForm.controls}static \u0275fac=function(e){return new(e||n)};static \u0275cmp=f({type:n,selectors:[["app-log-activity"]],decls:52,vars:25,consts:[[1,"container","mx-auto","max-w-2xl","p-4","sm:p-6"],[1,"mb-6"],[1,"text-3xl","font-bold","text-gray-800","dark:text-gray-200","flex","items-center"],["name","clipboard-list",1,"w-8","h-8","mr-3","text-primary"],[4,"ngIf"],[1,"text-gray-500","dark:text-gray-400","mt-1"],[1,"space-y-6","bg-white","dark:bg-gray-800","p-6","rounded-lg","shadow-md",3,"ngSubmit","formGroup"],["for","activityId",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["id","activityId","formControlName","activityId",1,"input-field",3,"ngClass"],["value","","disabled",""],[3,"value",4,"ngFor","ngForOf"],["class","validation-message",4,"ngIf"],[1,"grid","grid-cols-1","md:grid-cols-2","gap-6"],["for","date",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","date","id","date","formControlName","date",1,"input-field",3,"ngClass"],["for","durationMinutes",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","number","id","durationMinutes","formControlName","durationMinutes","placeholder","e.g., 30",1,"input-field",3,"ngClass"],["for","intensity",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["id","intensity","formControlName","intensity",1,"input-field"],["value","Low"],["value","Medium"],["value","High"],["for","notes",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["id","notes","formControlName","notes","rows","3","placeholder","Any details about your activity...",1,"input-field"],[1,"pt-4","border-t","border-gray-200","dark:border-gray-700","flex","justify-center"],["type","submit",1,"flex","items-center","text-m","bg-primary","text-white","hover:bg-primary-dark","font-semibold","rounded-md","disabled:opacity-50","p-2",3,"disabled"],["name","save",1,"w-5","h-5","mr-1"],[3,"value"],[1,"validation-message"],["for","distanceKm",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","number","id","distanceKm","formControlName","distanceKm","placeholder","e.g., 5.5",1,"input-field"],["for","caloriesBurned",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","number","id","caloriesBurned","formControlName","caloriesBurned","placeholder","e.g., 350",1,"input-field"]],template:function(e,o){e&1&&(a(0,"div",0)(1,"header",1)(2,"h1",2),c(3,"app-icon",3),s(4,U,2,0,"span",4)(5,z,2,0,"span",4),i(),a(6,"p",5),s(7,Y,2,0,"span",4)(8,J,2,0,"span",4),i()(),a(9,"form",6),b("ngSubmit",function(){return o.onSubmit()}),a(10,"div")(11,"label",7),r(12,"Activity"),i(),a(13,"select",8)(14,"option",9),r(15,"-- Select an Activity --"),i(),s(16,Q,2,3,"option",10),A(17,"async"),i(),s(18,W,2,0,"div",11),i(),a(19,"div",12)(20,"div")(21,"label",13),r(22,"Date"),i(),c(23,"input",14),s(24,X,2,0,"div",11),i(),a(25,"div")(26,"label",15),r(27,"Duration (minutes)"),i(),c(28,"input",16),s(29,Z,2,0,"div",11),i()(),a(30,"div")(31,"label",17),r(32,"Perceived Intensity"),i(),a(33,"select",18)(34,"option",19),r(35,"Low"),i(),a(36,"option",20),r(37,"Medium"),i(),a(38,"option",21),r(39,"High"),i()()(),a(40,"div",12),s(41,tt,4,0,"div",4)(42,et,4,0,"div",4),i(),a(43,"div")(44,"label",22),r(45,"Notes"),i(),c(46,"textarea",23),i(),a(47,"div",24)(48,"button",25),c(49,"app-icon",26),s(50,it,2,0,"span",4)(51,nt,2,0,"span",4),i()()()()),e&2&&(d(4),l("ngIf",!o.isEditMode()),d(),l("ngIf",o.isEditMode()),d(2),l("ngIf",!o.isEditMode()),d(),l("ngIf",o.isEditMode()),d(),l("formGroup",o.logActivityForm),d(4),l("ngClass",v(19,y,o.f.activityId.touched&&o.f.activityId.invalid)),d(3),l("ngForOf",x(17,17,o.availableActivities$)),d(2),l("ngIf",o.f.activityId.touched&&o.f.activityId.invalid),d(5),l("ngClass",v(21,y,o.f.date.touched&&o.f.date.invalid)),d(),l("ngIf",o.f.date.touched&&o.f.date.invalid),d(4),l("ngClass",v(23,y,o.f.durationMinutes.touched&&o.f.durationMinutes.invalid)),d(),l("ngIf",o.f.durationMinutes.touched&&o.f.durationMinutes.invalid),d(12),l("ngIf",o.f.distanceKm.enabled),d(),l("ngIf",o.f.caloriesBurned.enabled),d(6),l("disabled",o.logActivityForm.invalid),d(2),l("ngIf",!o.isEditMode()),d(),l("ngIf",o.isEditMode()))},dependencies:[I,w,C,_,E,q,N,D,V,M,O,P,k,T,B,K,R],styles:[".input-field[_ngcontent-%COMP%]{display:block;width:100%;border-radius:.375rem;border-width:1px;--tw-border-opacity: 1;border-color:rgb(209 213 219 / var(--tw-border-opacity, 1));padding:.5rem;--tw-shadow: 0 1px 2px 0 rgb(0 0 0 / .05);--tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.input-field[_ngcontent-%COMP%]:focus{--tw-border-opacity: 1;border-color:rgb(224 70 13 / var(--tw-border-opacity, 1));--tw-ring-opacity: 1;--tw-ring-color: rgb(224 70 13 / var(--tw-ring-opacity, 1)) }.input-field[_ngcontent-%COMP%]:disabled{opacity:.5}.input-field[_ngcontent-%COMP%]:is(.dark *){--tw-border-opacity: 1;border-color:rgb(75 85 99 / var(--tw-border-opacity, 1));--tw-bg-opacity: 1;background-color:rgb(55 65 81 / var(--tw-bg-opacity, 1));--tw-text-opacity: 1;color:rgb(229 231 235 / var(--tw-text-opacity, 1))}.input-invalid[_ngcontent-%COMP%]{--tw-border-opacity: 1;border-color:rgb(239 68 68 / var(--tw-border-opacity, 1));--tw-ring-opacity: 1;--tw-ring-color: rgb(239 68 68 / var(--tw-ring-opacity, 1)) }.validation-message[_ngcontent-%COMP%]{margin-top:.25rem;font-size:.75rem;line-height:1rem;--tw-text-opacity: 1;color:rgb(239 68 68 / var(--tw-text-opacity, 1))}"]})};export{H as LogActivityComponent};
