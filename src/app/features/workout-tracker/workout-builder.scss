.exercise-list-container {
  min-height: 60px; // Ensure drop list has some height even when empty for dropping
}

.exercise-item {
  transition: transform 200ms ease-out, box-shadow 200ms ease-out;
}

// This is our custom class, added by the independent directive.
// This style will be applied when the long press is successful.
:host ::ng-deep .is-long-pressing {
  // 1. The "pop" and "lift" effect
  // transform: scale(1.03);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.25); // The outer shadow for depth
  z-index: 1000;

  // 2. The "border" effect that STAYS INSIDE
  // We add the inset shadow to the existing outer shadow
  box-shadow: inset 0 0 0 2px #e0460d, 0 5px 15px rgba(0, 0, 0, 0.25);
  border-radius: 5px;
  
  // Remove the problematic outline and border
  // outline: none;
  // border-color: transparent; // Or whatever makes sense
}

/* When an item is being dragged, its original spot gets this placeholder */
.cdk-drag-placeholder {
  opacity: 0.4;
  background: #ccc;
  border: dotted 2px #999;
  min-height: 100px; // Match approximate item height
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
  display: block; // Ensure it takes up space
  margin-bottom: 0.5rem;
  /* space-y-2 */
}

/* The item being dragged */
.cdk-drag-preview {
  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
    0 8px 10px 1px rgba(0, 0, 0, 0.14),
    0 3px 14px 2px rgba(0, 0, 0, 0.12);
  border-radius: 0.5rem;
  /* rounded-lg */
  // Ensure its background is solid so content below doesn't show through
  background-color: var(--card-background-color, white);
  /* Use CSS variable or actual color */
}

body.dark .cdk-drag-preview {
  background-color: var(--dark-card-background-color, #1f2937);
  /* dark:bg-gray-700 */
}


/* While dragging over the list */
.cdk-drop-list-dragging .exercise-item:not(.cdk-drag-placeholder) {
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}


.cdk-drag-handle {
  cursor: grab; /* 'cursor-grab' */
  padding: 0.25rem; /* 'p-1' */
  color: #9ca3af; /* 'text-gray-400' */
  // display: flex;
  // flex-shrink: 0; /* 'flex-shrink-0' */
  position: relative; /* default position for top/right */
  top: 0.25rem; /* 'top-1' */
  right: 0.25rem; /* 'right-1' */
}

/* Hover states */
.cdk-drag-handle:hover {
  color: #4B5563; /* 'hover:text-gray-600' */
}

.dark .cdk-drag-handle {
  color: #6B7280; /* 'dark:text-gray-500' */
}

.dark .cdk-drag-handle:hover {
  color: #D1D5DB; /* 'dark:hover:text-gray-300' */
}

/* Responsive for small screens and above */
@media (min-width: 640px) {
  .cdk-drag-handle {
    position: static; /* 'sm:static' */
  }
}

.superset-spacing {
  margin-top: 0 !important;
}

// _variables.scss (or wherever you define your breakpoints)
$breakpoint-md: 768px; // Matching Tailwind's default 'md' breakpoint

// _mixins.scss (optional, for reusable media query mixins)
@mixin md-up {
  @media (min-width: #{$breakpoint-md}) {
    @content;
  }
}

// your-component.scss (or your main SCSS file)
.max-exercise-length {
  max-width: 250px; // Default for mobile

  @include md-up {
    max-width: 100%; // For medium screens and up
  }
}

.input_number_class {
  @apply w-full p-1.5 text-center font-bold bg-gray-50 dark:bg-gray-800 border-y border-gray-200 dark:border-gray-700 text-black dark:text-gray-200 focus:ring-2 focus:ring-primary dark:focus:ring-primary-light focus:outline-none z-10 relative rounded-md disabled:opacity-70 disabled:cursor-not-allowed;
}

.wrapper_ranged_input_number_class {
  @apply flex items-center w-full p-0.5 justify-center bg-gray-200 dark:bg-gray-700 rounded-md;
}
.input_number_class_separator {
  @apply text-gray-500 dark:text-gray-400 font-bold mx-1;
}