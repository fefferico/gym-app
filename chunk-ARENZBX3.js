import{a as j,v as $}from"./chunk-TOOSBRU6.js";import{Cc as R,E as P,K as k,N,O as f,_ as E,c as O,d as I,fd as B,hd as W,kc as F,kd as C,ld as M,m as _}from"./chunk-LWKZRPHK.js";import{a as m,b as y,g as v}from"./chunk-GAL4ENT6.js";var D=class x{constructor(e){this.storageService=e;this._loadPreferences()}WEIGHT_UNIT_KEY="fitTrackPro_weightUnit";MEASURE_UNIT_KEY="fitTrackPro_measureUnit";DISTANCE_MEASURE_UNIT_KEY="fitTrackPro_distanceMeasureUnit";BODY_WEIGHT_UNIT_KEY="fitTrackPro_bodyWeightUnit";BODY_MEASURE_UNIT_KEY="fitTrackPro_bodyMeasureUnit";currentWeightUnit=E("kg");currentMeasureUnit=E("cm");currentDistanceMeasureUnit=E("km");currentBodyWeightUnit=E("kg");currentBodyMeasureUnit=E("cm");translate=f(W);_loadPreferences(){let e=this.storageService.getItem(this.WEIGHT_UNIT_KEY);this.currentWeightUnit.set(e||"kg");let t=this.storageService.getItem(this.MEASURE_UNIT_KEY);this.currentMeasureUnit.set(t||"cm");let r=this.storageService.getItem(this.DISTANCE_MEASURE_UNIT_KEY);this.currentDistanceMeasureUnit.set(r||"km");let s=this.storageService.getItem(this.BODY_WEIGHT_UNIT_KEY);this.currentBodyWeightUnit.set(s||"kg");let i=this.storageService.getItem(this.BODY_MEASURE_UNIT_KEY);this.currentBodyMeasureUnit.set(i||"cm")}setWeightUnitPreference(e){this.storageService.setItem(this.WEIGHT_UNIT_KEY,e),this.currentWeightUnit.set(e)}setMeasureUnitPreference(e){this.storageService.setItem(this.MEASURE_UNIT_KEY,e),this.currentMeasureUnit.set(e)}setDistanceMeasureUnitPreference(e){this.storageService.setItem(this.DISTANCE_MEASURE_UNIT_KEY,e),this.currentDistanceMeasureUnit.set(e)}setBodyWeightUnitPreference(e){this.storageService.setItem(this.BODY_WEIGHT_UNIT_KEY,e),this.currentBodyWeightUnit.set(e)}setBodyMeasureUnitPreference(e){this.storageService.setItem(this.BODY_MEASURE_UNIT_KEY,e),this.currentBodyMeasureUnit.set(e)}getWeightUnitSuffix(){let e=this.currentWeightUnit()==="kg"?"units.weight.kg":"units.weight.lbs";return this.translate.instant(e)}getMeasureUnitSuffix(){let e=this.currentMeasureUnit()==="cm"?"units.measure.cm":"units.measure.in";return this.translate.instant(e)}getDistanceMeasureUnitSuffix(){let e=this.currentDistanceMeasureUnit()==="km"?"units.distance.km":"units.distance.mi";return this.translate.instant(e)}getBodyWeightUnitSuffix(){let e=this.currentBodyWeightUnit()==="kg"?"units.weight.kg":"units.weight.lbs";return this.translate.instant(e)}getBodyMeasureUnitSuffix(){let e=this.currentBodyMeasureUnit()==="cm"?"units.measure.cm":"units.measure.in";return this.translate.instant(e)}convertWeight(e,t,r){if(!e)return 0;if(t===r)return e;let s=2.20462,i=t==="kg"?e*s:e/s;return parseFloat(i.toFixed(2))}convertMeasure(e,t,r){if(t===r||!e)return e;let s=.393701,i=t==="cm"?e*s:e/s;return parseFloat(i.toFixed(2))}convertDistance(e,t,r){if(t===r||!e)return e;let s=.621371,i=t==="km"?e*s:e/s;return parseFloat(i.toFixed(3))}static \u0275fac=function(t){return new(t||x)(N(M))};static \u0275prov=k({token:x,factory:x.\u0275fac,providedIn:"root"})};var K=[{id:"beginner-workout-v1-a",name:"Beginner Weight Training - Workout A (V1)",description:"A foundational full-body workout focusing on major compound lifts. Perform this workout on your first training day of the week.",goal:"strength",exercises:[{id:"bwa-ex1",exerciseId:"barbell-back-squat",exerciseName:"Squats",sets:[{id:"bwa-ex1-s1",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex1-s2",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex1-s3",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"},{id:"bwa-ex2",exerciseId:"barbell-bench-press",exerciseName:"Bench Press",sets:[{id:"bwa-ex2-s1",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex2-s2",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex2-s3",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"},{id:"bwa-ex3",exerciseId:"bent-over-row-barbell",exerciseName:"Rows",sets:[{id:"bwa-ex3-s1",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex3-s2",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex3-s3",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"}]},{id:"beginner-workout-v1-b",name:"Beginner Weight Training - Workout B (V1)",description:"A complementary full-body workout to be alternated with Workout A. Focuses on pulling strength and overhead pressing.",goal:"strength",exercises:[{id:"bwb-ex1",exerciseId:"barbell-deadlift",exerciseName:"Deadlifts",sets:[{id:"bwb-ex1-s1",targetReps:8,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 6-8 reps."},{id:"bwb-ex1-s2",targetReps:8,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 6-8 reps."},{id:"bwb-ex1-s3",targetReps:8,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 6-8 reps."}],supersetId:null,supersetOrder:null,type:"standard"},{id:"bwb-ex2",exerciseId:"pull-up",exerciseName:"Pull-ups (or lat pull-downs)",sets:[{id:"bwb-ex2-s1",targetReps:10,targetWeight:null,restAfterSet:120,type:"standard",notes:"If you cannot do pull-ups, substitute with Lat Pulldowns. Aim for 8-10 reps."},{id:"bwb-ex2-s2",targetReps:10,targetWeight:null,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwb-ex2-s3",targetReps:10,targetWeight:null,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"},{id:"bwb-ex3",exerciseId:"overhead-press-barbell",exerciseName:"Shoulder Press",sets:[{id:"bwb-ex3-s1",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwb-ex3-s2",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwb-ex3-s3",targetReps:10,targetWeight:10,restAfterSet:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"}]}];var H=(s=>(s.WEIGHT="weight",s.REPS="reps",s.DISTANCE="distance",s.DURATION="duration",s))(H||{}),U=class x{storageService=f(M);SETTINGS_KEY="fitTrackPro_progressiveOverloadSettings";defaultSettings={enabled:!1,strategies:[],weightIncrement:null,repsIncrement:null,distanceIncrement:null,durationIncrement:null,sessionsToIncrement:1};settingsSubject;settings$;constructor(){let e=this.storageService.getItem(this.SETTINGS_KEY),t=e?y(m(m({},this.defaultSettings),e),{strategies:e.strategies||[]}):this.defaultSettings;this.settingsSubject=new I(t),this.settings$=this.settingsSubject.asObservable()}getSettings(){return this.settingsSubject.getValue()}saveSettings(e){let t=this.getSettings(),r=m(m({},t),e);this.storageService.setItem(this.SETTINGS_KEY,r),this.settingsSubject.next(r)}getDataForBackup(){return this.getSettings()}replaceData(e){let t=e?y(m(m({},this.defaultSettings),e),{strategies:e.strategies||[]}):this.defaultSettings;this.storageService.setItem(this.SETTINGS_KEY,t),this.settingsSubject.next(t)}clearSettings_DEV_ONLY(){this.replaceData(null),console.log("Progressive Overload settings cleared.")}applyOverloadToExercise(e,t){!t.enabled||!t.strategies||t.strategies.length===0||e.sets.forEach(r=>{r.type!=="warmup"&&t.strategies.forEach(s=>{switch(s){case"weight":if(t.weightIncrement&&(r.targetWeight||r.targetWeightMin)){let i=r.targetWeight;r.targetWeight=(i??0)+t.weightIncrement,r.targetWeightMin&&(r.targetWeightMin=(r.targetWeightMin??i??0)+t.weightIncrement,r.targetWeightMax&&r.targetWeightMin>r.targetWeightMax&&(r.targetWeightMax=r.targetWeightMin+t.weightIncrement))}break;case"reps":if(t.repsIncrement&&(r.targetReps||r.targetRepsMin)){let i=r.targetReps;r.targetReps=(i??0)+t.repsIncrement,r.targetRepsMin&&(r.targetRepsMin=(r.targetRepsMin??i??0)+t.repsIncrement,r.targetRepsMax&&r.targetRepsMin>r.targetRepsMax&&(r.targetRepsMax=r.targetRepsMin+t.repsIncrement))}break;case"distance":if(t.distanceIncrement&&(r.targetDistance||r.targetDistanceMin)){let i=r.targetDistance;r.targetDistance=(i??0)+t.distanceIncrement,r.targetDistanceMin&&(r.targetDistanceMin=(r.targetDistanceMin??i??0)+t.distanceIncrement,r.targetDistanceMax&&r.targetDistanceMin>r.targetDistanceMax&&(r.targetDistanceMax=r.targetDistanceMin+t.distanceIncrement))}break;case"duration":if(t.durationIncrement&&(r.targetDuration||r.targetDurationMin)){let i=r.targetDuration;r.targetDuration=(i??0)+t.durationIncrement,r.targetDurationMin&&(r.targetDurationMin=(r.targetDurationMin??i??0)+t.durationIncrement,r.targetDurationMax&&r.targetDurationMin>r.targetDurationMax&&(r.targetDurationMax=r.targetDurationMin+t.durationIncrement))}break;default:break}})})}static \u0275fac=function(t){return new(t||x)};static \u0275prov=k({token:x,factory:x.\u0275fac,providedIn:"root"})};var L=class x{storageService=f(M);appSettingsService=f(j);router=f(F);alertService=f(C);unitsService=f(D);translate=f(W);subscriptionService=f($);ROUTINES_STORAGE_KEY="fitTrackPro_routines";PAUSED_WORKOUT_KEY="fitTrackPro_pausedWorkoutState";PAUSED_STATE_VERSION="1.2";toastService=f(B);progressiveOverloadService=f(U);routinesSubject=new I(this.loadRoutinesFromStorage());routines$=this.routinesSubject.asObservable();isLoadingRoutinesSubject=new I(!0);isLoadingRoutines$=this.isLoadingRoutinesSubject.asObservable();_pausedWorkoutDiscarded=new O;pausedWorkoutDiscarded$=this._pausedWorkoutDiscarded.asObservable();constructor(){this.isLoadingRoutinesSubject.next(!0);let e=this.loadRoutinesFromStorage();this.routinesSubject=new I(e),this.routines$=this.routinesSubject.asObservable().pipe(P(1)),this._seedAndMergeRoutinesFromStaticData(e)}refreshRoutinesSort(){let e=this.routinesSubject.getValue();this._saveRoutinesToStorage(e),console.log("WorkoutService: Routines list re-sorted and refreshed.")}_sortRoutines(e){return e.slice().sort((t,r)=>{if(t.isFavourite&&!r.isFavourite)return-1;if(!t.isFavourite&&r.isFavourite)return 1;let s=!!t.lastPerformed,i=!!r.lastPerformed;if(s&&!i)return-1;if(!s&&i)return 1;if(s&&i){let n=r.lastPerformed.localeCompare(t.lastPerformed);if(n!==0)return n}return t.name.localeCompare(r.name)})}loadRoutinesFromStorage(){let e=this.storageService.getItem(this.ROUTINES_STORAGE_KEY);return e?this._sortRoutines(e):[]}_saveRoutinesToStorage(e){let t=this._sortRoutines(e);this.storageService.setItem(this.ROUTINES_STORAGE_KEY,t),this.routinesSubject.next(t)}_seedAndMergeRoutinesFromStaticData(e){try{let t=K,r=this._migrateRoutines(t),s=new Set(e.map(n=>n.id)),i=r.filter(n=>!s.has(n.id));if(i.length>0){console.log(`Seeding ${i.length} new routines from static data`);let n=[...e,...i];this.saveRoutinesToStorage(n)}else console.log("No new routines to seed from static data. All are present in storage")}catch(t){console.error("Failed to process or seed routines from static data:",t)}finally{this.isLoadingRoutinesSubject.next(!1)}}saveRoutinesToStorage(e){this.storageService.setItem(this.ROUTINES_STORAGE_KEY,e),this.routinesSubject.next([...this._sortRoutines(e)])}getCurrentRoutines(){return this.routinesSubject.getValue()}getRoutineById(e){return this.routines$.pipe(_(t=>t.find(r=>r.id===e)))}getRoutineByIdSync(e){return this.routinesSubject.getValue().find(t=>t.id===e)}addRoutine(e){let t=this.routinesSubject.getValue(),r=y(m({},e),{id:R()}),s=[...t,r];return this.saveRoutinesToStorage(s),console.log("Added routine:",r),r}updateRoutine(e,t=!1){return v(this,null,function*(){let r=this.routinesSubject.getValue(),s=r.findIndex(i=>i.id===e.id);if(!t){let i=this.isPausedSession()?this.getPausedSession():null,n=!1;if(i&&i.routineId&&i.routineId===e.id&&(yield this.alertService.showAlert(this.translate.instant("workoutService.alerts.editRunningTitle"),this.translate.instant("workoutService.alerts.editRunningMessage")).then(()=>{n=!0,s=-1})),n)return}if(s>-1){let i=[...r];return i[s]=this._migrateRoutines([e])[0],this.saveRoutinesToStorage(i),console.log("Updated routine:",e),e}this.toastService.error(this.translate.instant("workoutService.toasts.updateErrorMessage",{id:e.id}),4e3,this.translate.instant("workoutService.toasts.updateErrorTitle"))})}deleteRoutine(e){let t=this.routinesSubject.getValue(),r=t.filter(s=>s.id!==e);r.length<t.length?(this.saveRoutinesToStorage(r),console.log("Deleted routine with id:",e)):console.warn(`WorkoutService: Routine with id ${e} not found for deletion`)}generateWorkoutExerciseId(){return R()}generateExerciseSetId(){return R()}suggestNextSetParameters(e,t){let r=JSON.parse(JSON.stringify(t)),s=this.progressiveOverloadService.getSettings();return!s.enabled||!s.strategies||s.strategies.length===0||!e||(t.targetReps&&e.repsAchieved>=t.targetReps||t.targetRepsMin&&e.repsAchieved>=t.targetRepsMin||t.targetDuration&&e.repsAchieved>=t.targetDuration||t.targetDurationMin&&e.repsAchieved>=t.targetDurationMin||t.targetDistance&&e.weightUsed&&e.weightUsed>=t.targetDistance||t.targetDistanceMin&&e.weightUsed&&e.weightUsed>=t.targetDistanceMin?s.strategies.forEach(n=>{switch(n){case"weight":s.weightIncrement&&e.weightUsed!=null&&(r.targetWeight=parseFloat((e.weightUsed+s.weightIncrement).toFixed(2)));break;case"reps":s.repsIncrement&&e.repsAchieved!=null&&(r.targetReps=(r.targetReps||e.repsAchieved)+s.repsIncrement);break;case"duration":s.durationIncrement&&e.repsAchieved!=null&&(r.targetDuration=(r.targetDuration||e.repsAchieved)+s.durationIncrement);break;case"distance":s.distanceIncrement&&e.weightUsed!=null&&(r.targetDistance=parseFloat(((r.targetDistance||e.weightUsed)+s.distanceIncrement).toFixed(2)));break}}):(console.log("PO Suggestion: Failure last time. Sticking to previous attempt's parameters."),r.targetWeight=t.targetWeight??t.targetWeightMin,r.targetReps=t.targetReps??t.targetRepsMin,r.targetDuration=t.targetDuration??t.targetDurationMin,r.targetDistance=t.targetDistance??t.targetDistanceMin),r.id=t.id),r}getDataForBackup(){return this.routinesSubject.getValue()}mergeData(e){if(!Array.isArray(e)){this.toastService.error(this.translate.instant("workoutService.toasts.importFailed"),0,this.translate.instant("workoutService.toasts.importErrorTitle"));return}let t=this.routinesSubject.getValue(),r=new Map(t.map(a=>[a.id,a])),s=0,i=0;e.forEach(a=>{if(!a.id||!a.name){console.warn("Skipping invalid routine during import:",a);return}r.has(a.id)?s++:i++,r.set(a.id,a)});let n=Array.from(r.values());this._saveRoutinesToStorage(this._sortRoutines(n)),console.log(`WorkoutService: Merged imported routines. Updated: ${s}, Added: ${i}`),this.toastService.success(this.translate.instant("workoutService.toasts.importSuccessMessage",{updatedCount:s,addedCount:i}),6e3,this.translate.instant("workoutService.toasts.importSuccessTitle"))}clearAllRoutines_DEV_ONLY(){let e=this.translate.instant("workoutService.alerts.clearAllTitle");return this.alertService.showConfirm(e,this.translate.instant("workoutService.alerts.clearAllMessage")).then(t=>v(this,null,function*(){t&&t.data&&(this.saveRoutinesToStorage([]),yield this.alertService.showAlert(e,this.translate.instant("workoutService.alerts.clearAllSuccess")))}))}clearAllExecutedRoutines_DEV_ONLY(){return this.alertService.showConfirm("Info","Are you sure you want to reset the 'lastPerformed' property of ALL routines LOGS? This cannot be undone.").then(e=>v(this,null,function*(){e&&e.data&&(this.getCurrentRoutines().forEach(t=>{t.lastPerformed=void 0,this.updateRoutine(t)}),yield this.alertService.showAlert("Info","All routines logs cleared!"))}))}getEstimatedWorkTimeForSet(e){let t=0;(!e.targetReps||e.targetReps<=0)&&e.targetRepsMin&&e.targetRepsMax?e.targetReps=Math.round((e.targetRepsMin+e.targetRepsMax)/2):(!e.targetReps||e.targetReps<=0)&&e.targetRepsMin?e.targetReps=e.targetRepsMin:(!e.targetReps||e.targetReps<=0)&&e.targetRepsMax&&(e.targetReps=e.targetRepsMax),e.targetReps&&e.targetReps>0&&(t=e.targetReps*4);let r=e.targetDuration||0,s=Math.max(t,r);return s>0?Math.max(s,30):30}getRestTimeForSet(e){return e.restAfterSet||0}getEstimatedRoutineDuration(e){if(!e||!e.exercises||e.exercises.length===0)return 0;let t=0,r=e.exercises,s=new Set;for(let i=0;i<r.length;i++){let n=r[i];if(!(n.supersetId&&s.has(n.supersetId)))if(n.supersetId){s.add(n.supersetId);let a=r.filter(d=>d.supersetId===n.supersetId),c=a.find(d=>d.supersetOrder===0);if(!c){i+=a.length-1;continue}let g=c.sets.length,o=i+a.length>=r.length;if(c.supersetType==="emom"){let h=(c.emomTimeSeconds||60)*g;if(t+=h,!o){let u=a[a.length-1].sets[g-1];t+=this.getRestTimeForSet(u)}}else for(let d=0;d<g;d++)a.forEach((h,l)=>{let u=h.sets[d];if(u){t+=this.getEstimatedWorkTimeForSet(u);let S=d===g-1,p=l===a.length-1;S&&p&&o||(t+=this.getRestTimeForSet(u))}});i+=a.length-1}else n.sets.forEach((a,c)=>{t+=this.getEstimatedWorkTimeForSet(a);let g=i===r.length-1,o=c===n.sets.length-1;g&&o||(t+=this.getRestTimeForSet(a))})}return Math.round(t/60)}startWorkout(){}checkPlayerMode(e){let t=this.getCurrentRoutines().find(a=>a.id===e),r="compact",s=this.subscriptionService.isPremium()&&this.appSettingsService.getSettings()?this.appSettingsService.getSettings().playerMode:r,i=this.subscriptionService.isPremium()&&t?.goal==="tabata",n="";return i?"/workout/play/tabata":s==="focus"?"/workout/play/focus":"/workout/play/compact"}navigateToPlayer(e,t){return v(this,null,function*(){let r=this.checkPlayerMode(e),s=t&&t.forceNavigation,i=yield this.checkForPausedSession(s);if(i){let n=i.routineId||"-1";r=this.checkPlayerMode(n),this.router.navigate([r,n],{queryParams:{resume:"true"}})}else this.router.navigate([r,e],t||{})})}removePausedWorkout(e=!0){this.storageService.removeItem(this.PAUSED_WORKOUT_KEY),this._pausedWorkoutDiscarded.next(),e&&this.toastService.info(this.translate.instant("workoutService.toasts.pausedDiscarded"))}savePausedWorkout(e){e&&this.storageService.setItem(this.PAUSED_WORKOUT_KEY,e)}isPausedSession(){return!!this.storageService.getItem(this.PAUSED_WORKOUT_KEY)}getPausedVersion(){return this.storageService.getItem(this.PAUSED_STATE_VERSION)||"1.0"}getPausedSession(){return this.storageService.getItem(this.PAUSED_WORKOUT_KEY)}checkForPausedSession(e=!1){return v(this,null,function*(){let t=this.storageService.getItem(this.PAUSED_WORKOUT_KEY);if(t){if(e||(yield this.alertService.showConfirmationDialog(this.translate.instant("workoutService.alerts.resume.title"),this.translate.instant("workoutService.alerts.resume.message"),[{text:this.translate.instant("workoutService.alerts.resume.resumeButton"),role:"confirm",data:!0,icon:"play"},{text:this.translate.instant("workoutService.alerts.resume.discardButton"),role:"cancel",data:!1,icon:"trash"}]))?.data)return t;this.storageService.removeItem(this.PAUSED_WORKOUT_KEY);return}})}promptAndCreateWorkoutExercise(e,t){return v(this,null,function*(){let r=e.category==="cardio",s=e.category==="kettlebells",i=s&&t?t.targetWeight??t.weightUsed:this.unitsService.currentWeightUnit()==="kg"?10:22.2,n=r?60:void 0,a=r?1:void 0,c=s?45:60,g=s&&t?t.targetReps??t.repsAchieved:10,o=3,d=[{label:this.translate.instant("workoutService.prompts.labels.exerciseName"),name:"name",type:"text",value:e.name,attributes:{disabled:!0}},{label:this.translate.instant("workoutService.prompts.labels.numSets"),name:"numSets",type:"number",value:o,attributes:{min:1,required:!0}},{label:this.translate.instant("workoutService.prompts.labels.rest"),name:"rest",type:"number",value:c,attributes:{min:1,required:!0}}],h=r?[...d,{label:this.translate.instant("workoutService.prompts.labels.targetDistance",{unit:this.unitsService.getDistanceMeasureUnitSuffix()}),name:"distance",type:"number",value:a,attributes:{min:0,required:!0}},{label:this.translate.instant("workoutService.prompts.labels.targetDuration"),name:"duration",type:"number",value:n,attributes:{min:0,required:!0}}]:[...d,{label:this.translate.instant("workoutService.prompts.labels.numReps"),name:"numReps",type:"number",value:g,attributes:{min:0,required:!0}},{label:this.translate.instant("workoutService.prompts.labels.targetWeight",{unit:this.unitsService.getWeightUnitSuffix()}),name:"weight",type:"number",value:i,attributes:{min:0,required:!0}}],l=yield this.alertService.showPromptDialog(this.translate.instant("workoutService.prompts.addExerciseTitle",{exerciseName:e.name}),"",h);if(!l)return null;let u=String(l.name).trim()||e.name,S=parseInt(String(l.numSets))||o,p=parseInt(String(l.numReps))||g,b=parseFloat(String(l.weight))??i,w=parseInt(String(l.distance))||a,V=parseInt(String(l.duration))||n,G=parseInt(String(l.rest))||c,A=[];for(let T=0;T<S;T++)A.push({id:`custom-set-${R()}`,targetReps:r?void 0:p,targetWeight:r?void 0:b,targetDistance:r?w:void 0,targetDuration:r?V:void 0,restAfterSet:G,type:"standard",notes:""});return{id:`custom-exercise-${R()}`,exerciseId:e.id,exerciseName:u,sets:A,supersetId:null,supersetOrder:null,sessionStatus:"pending",type:"standard"}})}areAllPropertiesFalsy(e){return Object.values(e).every(t=>!t)}reorderExercisesForSupersets(e){let t=[],r=new Set;for(let s of e)r.has(s.id)||(s.supersetId?e.filter(n=>n.supersetId===s.supersetId).sort((n,a)=>(n.supersetOrder??0)-(a.supersetOrder??0)).forEach(n=>{t.push(n),r.add(n.id)}):(t.push(s),r.add(s.id)));return t}createSuperset(e,t,r){return v(this,null,function*(){let i=e.exercises.map((l,u)=>y(m({},l),{originalIndex:u})).filter(l=>!l.supersetId).map(l=>({label:l.exerciseName,name:String(l.originalIndex),type:"checkbox",value:l.originalIndex===t}));i.push({name:"supersetRounds",type:"number",label:"Number of Rounds",value:"1",min:1,placeholder:"Enter number of rounds"});let n=yield this.alertService.showPromptDialog("Create Superset","Select exercises to link together.",i);if(!n||this.areAllPropertiesFalsy(n))return null;let a=Number(n.supersetRounds)||1;delete n.supersetRounds;let c=Object.keys(n).filter(l=>n[l]).map(Number).sort((l,u)=>l-u);if(c.length<2)return this.toastService.info("Please select at least two exercises to create a superset."),null;let g=JSON.parse(JSON.stringify(e)),o=[...r],d=R(),h=0;for(let l of c){let u=g.exercises[l];if(u){o=o.filter(p=>p.id!==u.id);let S=u.sets.length>0?m({},u.sets[0]):{id:R(),targetReps:8,targetWeight:10,restAfterSet:60,type:"standard"};u.sets=[],u.supersetId=d,u.supersetOrder=h++,u.type="superset";for(let p=1;p<=a;p++)u.sets.push(y(m({},S),{id:R()}))}}return g.exercises=this.reorderExercisesForSupersets(g.exercises),this.alertService.showAlert("INFO",`Superset created with ${c.length} exercises and ${a} rounds: existing logs were cleared and sets standardized.`),{updatedRoutine:g,updatedLoggedExercises:o,newSupersetId:d}})}vibrate(){let e=navigator;e&&"vibrate"in e&&e.vibrate(50)}addToSuperset(e,t,r,s){return v(this,null,function*(){let i=e.exercises[t];if(i.supersetId)return s.info("This exercise is already in a superset."),null;let n=new Map;if(e.exercises.forEach(p=>{p.supersetId&&(n.has(p.supersetId)||n.set(p.supersetId,[]),n.get(p.supersetId).push(p))}),n.size===0)return s.error("No supersets exist to add this exercise to."),null;let a=Array.from(n.values()).map((p,b)=>({name:"supersetChoice",type:"radio",label:`Superset: ${p.map(w=>w.exerciseName).join(" & ")}`,value:p[0].supersetId,checked:b===0})),c=yield r.showPromptDialog("Add to Superset",`Which superset for "${i.exerciseName}"?`,a,"Add","Cancel");if(!c||!c.supersetChoice)return null;let g=c.supersetChoice,o=JSON.parse(JSON.stringify(e)),d=o.exercises.find(p=>p.id===i.id),h=o.exercises.filter(p=>p.supersetId===g);if(!d||h.length===0)return s.error("Could not find the target exercise or superset."),null;let l=h.length+1,u=h[0].sets.length||1,S=d.sets[0]||{id:R(),targetReps:8,targetWeight:10,restAfterSet:60,type:"standard"};return d.sets=Array.from({length:u},()=>y(m({},S),{id:R()})),d.supersetId=String(g),d.supersetOrder=h.length,d.type="superset",o.exercises=this.reorderExercisesForSupersets(o.exercises),s.success(`${d.exerciseName} added to the superset.`),o})}removeFromSuperset(e,t,r,s,i){return v(this,null,function*(){let n=e.exercises[t];if(!n.supersetId||!(yield s.showConfirm("Remove from Superset",`Remove ${n.exerciseName} from this superset? Its logged sets for this session will be cleared.`))?.data)return null;let c=JSON.parse(JSON.stringify(e)),g=[...r],o=c.exercises[t],d=o.supersetId,h=g.findIndex(u=>u.id===o.id);h>-1&&(g.splice(h,1),i.info(`Logged data for ${o.exerciseName} was cleared.`)),o.supersetId=null,o.supersetOrder=null,o.type="standard";let l=c.exercises.filter(u=>u.supersetId===d);return l.length<=1?(l.forEach(u=>{u.supersetId=null,u.supersetOrder=null,u.type="standard"}),i.info("Superset dissolved as only one exercise remains.")):(l.sort((u,S)=>(u.supersetOrder??0)-(S.supersetOrder??0)).forEach((u,S)=>{u.supersetOrder=S}),i.info(`${o.exerciseName} removed from superset.`)),c.exercises=this.reorderExercisesForSupersets(c.exercises),{updatedRoutine:c,updatedLoggedExercises:g}})}getSetTargetDisplay(e,t){if(!e)return"";if(t==="tempo")return e.targetTempo||"-";let r=-1,s=-1,i=-1;switch(t){case"reps":r=e.targetRepsMin||0,s=e.targetRepsMax||0,i=e.targetReps||0;break;case"duration":r=e.targetDurationMin||0,s=e.targetDurationMax||0,i=e.targetDuration||0;break;case"weight":r=e.targetWeightMin||0,s=e.targetWeightMax||0,i=e.targetWeight||0;break;case"distance":r=e.targetDistanceMin||0,s=e.targetDistanceMax||0,i=e.targetDistance||0;break;default:break}if(r!=null||s!=null){if(r!=null&&s!=null)return r===s?(i??r).toString():`${r}-${s}`;if(r!=null)return`${r}+`;if(s!=null)return`${this.translate.instant("workoutService.display.upTo")} ${s}`}return i!=null?`${i}`:""}getWeightDisplay(e,t){return t.category==="cardio"||t.category==="stretching"?this.translate.instant("workoutService.display.weightNotApplicable"):t.category==="bodyweight/calisthenics"?e.targetWeight!=null&&e.targetWeight>0?`${e.targetWeight} ${this.unitsService.getWeightUnitSuffix()}`:this.translate.instant("workoutService.display.bodyweight"):e.targetWeight!=null&&e.targetWeight>0?`${e.targetWeight} ${this.unitsService.getWeightUnitSuffix()}`:e.targetWeight===0?this.translate.instant("workoutService.display.noAddedWeight"):this.translate.instant("workoutService.display.userDefined")}_migrateSetParams(e){let t=m({},e);return typeof e.reps=="number"&&typeof t.targetReps>"u"&&(t.targetReps=e.reps,delete t.reps),typeof e.weight=="number"&&typeof t.targetWeight>"u"&&(t.targetWeight=e.weight,delete t.weight),typeof e.duration=="number"&&typeof t.targetDuration>"u"&&(t.targetDuration=e.duration,delete t.duration),typeof e.distance=="number"&&typeof t.targetDistance>"u"&&(t.targetDistance=e.distance,delete t.distance),t.id||(t.id=R()),t}_migrateRoutines(e){return!e||e.length===0?[]:e.map(t=>{let r=t.exercises.map(s=>{let i=s.sets.map(n=>this._migrateSetParams(n));return y(m({},s),{sets:i})});return y(m({},t),{exercises:r})})}enableAllRoutines_DEV_ONLY(){let e=this.getCurrentRoutines().map(t=>y(m({},t),{isDisabled:!1}));this._saveRoutinesToStorage(e),this.toastService.success(this.translate.instant("workoutService.toasts.enableAllSuccess"))}getSupersetSize(e,t){let r=e?.exercises[t];return r?.supersetId&&e?.exercises.filter(s=>s.supersetId===r.supersetId).length||0}exerciseNameDisplay(e){if(!e||!e.exerciseName)return this.translate.instant("workoutService.display.unnamedExercise");let t=e.exerciseName.trim();return/dumbbell/i.test(t)&&(t=t.replace(/dumbbell/gi,"DB")),/kettlebell/i.test(t)&&(t=t.replace(/kettlebell/gi,"KB")),/kb/i.test(t)&&(t=t.replace(/overhead/gi,"OH")),/alternating/i.test(t)&&(t=t.replace(/alternating/gi,"ALT.")),t}addFieldToSet(e,t,r,s,i){let n=JSON.parse(JSON.stringify(e)),a=n.exercises[t].sets[r];if(!a.fieldOrder){let{visible:o}=this.getFieldsForSet(e,t,r);a.fieldOrder=o}a.fieldOrder.includes(s)||a.fieldOrder.push(s);let c=s==="tempo"||s==="notes"?String(i):"",g=s!=="tempo"&&s!=="notes"?Number(i):null;switch(s){case"weight":a.targetWeight=g;break;case"reps":a.targetReps=g;break;case"distance":a.targetDistance=g;break;case"duration":a.targetDuration=g;break;case"tempo":a.targetTempo=c;break}return n}getVisibleExerciseColumns(e,t){let r=e.exercises[t];return!r||r.sets?.length===0?{weight:!1,reps:!1,distance:!1,duration:!1}:{weight:r.sets.some(s=>(s.targetWeight??0)>0||(s.targetWeightMin??0)>0),reps:r.sets.some(s=>(s.targetReps??0)>0||(s.targetRepsMin??0)>0),distance:r.sets.some(s=>(s.targetDistance??0)>0||(s.targetDistanceMin??0)>0),duration:r.sets.some(s=>(s.targetDuration??0)>0||(s.targetDurationMin??0)>0),tempo:r.sets.some(s=>!!s.targetTempo&&s.targetTempo.trim().length>0)}}getVisibleSetColumns(e,t,r){let i=e.exercises[t]?.sets[r];return i?{weight:(i.targetWeight??0)>0||(i.targetWeightMin??0)>0,reps:(i.targetReps??0)>0||(i.targetRepsMin??0)>0,distance:(i.targetDistance??0)>0||(i.targetDistanceMin??0)>0,duration:(i.targetDuration??0)>0||(i.targetDurationMin??0)>0,tempo:!!i.targetTempo&&i.targetTempo.trim().length>0}:{weight:!1,reps:!1,distance:!1,duration:!1}}promptAddField(e,t,r){return v(this,null,function*(){let{hidden:s}=this.getFieldsForSet(e,t,r);if(s.length===0)return this.toastService.info("All available metrics are already added to this set."),null;let i=!!e.exercises[t].supersetId,n;if(i){let b=["weight","reps"];if(n=s.filter(w=>b.includes(w)),n.every(w=>!b.includes(w)))return this.toastService.info("Only 'Weight' and 'Reps' can be added to sets within a superset."),null}let c=(n||s).map(b=>({text:b.charAt(0).toUpperCase()+b.slice(1),role:"add",data:b,icon:b==="duration"?"hourglass":b}));c.push({text:this.translate.instant("common.cancel"),role:"cancel",data:null,icon:"cancel"});let g=yield this.alertService.showConfirmationDialog(this.translate.instant("workoutBuilder.prompts.addField.title"),this.translate.instant("workoutBuilder.prompts.addField.message",{setNumber:r+1}),c,{showCloseButton:!0});if(!g||!g.data)return null;let o=g.data,d=`${this.translate.instant("workoutBuilder.prompts.setTarget.title",{field:o})}`,h=0;switch(o){case"weight":d+=` (${this.unitsService.getWeightUnitSuffix()})`,h=10;break;case"reps":h=8;break;case"duration":d+=" (s)",h=60;break;case"distance":d+=` (${this.unitsService.getDistanceMeasureUnitSuffix()})`,h=1;break;case"tempo":h="2-0-1-0";break}let l=o!=="tempo"?{min:"0",step:"any"}:{},u=yield this.alertService.showPromptDialog(this.translate.instant("workoutBuilder.prompts.setTarget.title",{field:o.charAt(0).toUpperCase()+o.slice(1)}),this.translate.instant("workoutBuilder.prompts.setTarget.message",{setNumber:r+1}),[{name:"targetValue",type:o==="tempo"?"text":"number",label:d,value:h,attributes:l}],this.translate.instant("workoutBuilder.prompts.setTarget.applyButton"));if(!u||u.targetValue===null||u.targetValue===void 0)return null;let S=u.targetValue,p=this.addFieldToSet(e,t,r,o,S);return this.toastService.success(`'${o.toUpperCase()}' field added to Set #${r+1}.`),p})}getFieldsForSet(e,t,r){let s=["weight","reps","distance","duration","tempo"],i=this.getVisibleSetColumns(e,t,r),n=s.filter(c=>i[c]),a=s.filter(c=>!n.includes(c));return{visible:n,hidden:a}}promptRemoveField(e,t,r){return v(this,null,function*(){let s=this.getVisibleSetColumns(e,t,r),i=Object.keys(s).filter(o=>s[o]);if(i.length===0)return this.toastService.info("No fields can be removed from this set."),e;let n=i.map(o=>({text:o.charAt(0).toUpperCase()+o.slice(1),role:"remove",data:o,icon:o==="duration"?"hourglass":o,cssClass:"bg-red-500 hover:bg-red-600"}));n.push({text:"Cancel",role:"cancel",data:null,icon:"cancel"});let a=yield this.alertService.showConfirmationDialog("Remove Field from Exercise","Which metric would you like to remove from this set of this exercise?",n,{showCloseButton:!0});if(!a||!a.data)return null;let c=a.data;return this.removeMetricFromSet(e,t,r,c)})}removeMetricFromSet(e,t,r,s){let i=JSON.parse(JSON.stringify(e)),n=i.exercises[t].sets[r];return n[`target${s.charAt(0).toUpperCase()+s.slice(1)}`]=void 0,n[`target${s.charAt(0).toUpperCase()+s.slice(1)}Min`]=void 0,n[`target${s.charAt(0).toUpperCase()+s.slice(1)}Max`]=void 0,n.fieldOrder&&(n.fieldOrder=n.fieldOrder.filter(a=>a!==s)),this.toastService.info(`'${s.toUpperCase()}' field removed from set #${r+1}.`),i}getSetFieldOrder(e,t,r){let i=e?.exercises?.[t]?.sets?.[r];return i&&Array.isArray(i.fieldOrder)?i.fieldOrder:null}getInitialRoutines(e){return this.routinesSubject.getValue().slice(0,e)}static \u0275fac=function(t){return new(t||x)};static \u0275prov=k({token:x,factory:x.\u0275fac,providedIn:"root"})};export{H as a,U as b,D as c,L as d};
