import{b as k}from"./chunk-YXUPPKGL.js";import{E as A,G as O,I as T,M as w,Mc as j,Nc as $,Oc as M,Pc as _,Q as y,Tc as L,Uc as E,a as g,b as u,g as h,k as v,p,pc as P,r as R,s as m,t as I}from"./chunk-3N4EQCWM.js";function D(S,e){return L(S,e?.in).getDay()}var F=class S{storageService=y($);workoutService=y(_);alertService=y(j);toastService=y(M);PROGRAMS_STORAGE_KEY="fitTrackPro_trainingPrograms";programsSubject=new v(this._loadProgramsFromStorage());programs$=this.programsSubject.asObservable();isLoadingProgramsSubject=new v(!0);isLoadingPrograms$=this.isLoadingProgramsSubject.asObservable();constructor(){this.isLoadingProgramsSubject.next(!0);let e=this._loadProgramsFromStorage();this.programsSubject=new v(e),this.programs$=this.programsSubject.asObservable().pipe(O(1)),this._seedAndMergeProgramsFromStaticData(e)}_loadProgramsFromStorage(){let e=this.storageService.getItem(this.PROGRAMS_STORAGE_KEY);return e||[]}_saveProgramsToStorage(e){this.storageService.setItem(this.PROGRAMS_STORAGE_KEY,e),this.programsSubject.next([...e])}_seedAndMergeProgramsFromStaticData(e){try{let a=[],r=new Set(e.map(t=>t.id)),o=a.filter(t=>!r.has(t.id));if(o.length>0){console.log(`Seeding ${o.length} new training programs from static data.`);let t=[...e,...o];this._saveProgramsToStorage(t)}else console.log("No new training programs to seed. All default programs are present in storage.")}catch(a){console.error("Failed to process or seed training programs from static data:",a)}finally{this.isLoadingProgramsSubject.next(!1)}}getAllPrograms(){return this.programs$}getProgramsByRoutineId(e){return e?this.programs$.pipe(m(a=>a.filter(r=>r.schedule.some(o=>o.routineId===e)))):p([])}getProgramById(e){return this.programs$.pipe(m(a=>a.find(r=>r.id===e)))}addProgram(e){return h(this,null,function*(){let a=this.programsSubject.getValue(),r=u(g({},e),{id:P(),isActive:!1,schedule:e.schedule.map(t=>u(g({},t),{id:P()}))}),o=[...a,r];return this._saveProgramsToStorage(o),this.toastService.success(`Program "${r.name}" created.`,3e3,"Program Created"),r})}updateProgram(e){return h(this,null,function*(){let a=this.programsSubject.getValue(),r=a.findIndex(o=>o.id===e.id);if(r>-1){let o=e.schedule.map(i=>u(g({},i),{id:i.id||P()})),t=u(g({},e),{schedule:o}),s=[...a];return s[r]=t,t.isActive&&(s=s.map(i=>i.id===t.id?i:u(g({},i),{isActive:!1}))),this._saveProgramsToStorage(s),this.toastService.success(`Program "${t.name}" updated.`,3e3,"Program Updated"),t}this.toastService.error(`Program with ID ${e.id} not found.`,0,"Update Error")})}deleteProgram(e){return h(this,null,function*(){let a=yield R(this.getProgramById(e).pipe(A(1)));if(!a){this.toastService.error("Program not found.",0,"Delete Error");return}let r=yield this.alertService.showConfirm("Delete Program",`Are you sure you want to delete the program "${a.name}"? This action cannot be undone.`,"Delete");if(r&&r.data){let t=this.programsSubject.getValue().filter(s=>s.id!==e);this._saveProgramsToStorage(t),this.toastService.info(`Program "${a.name}" deleted.`,3e3,"Program Deleted")}})}setActiveProgram(e){return h(this,null,function*(){let a=this.programsSubject.getValue(),r=a.find(t=>t.id===e);if(!r){this.toastService.error("Program not found to activate.",0,"Activation Error");return}let o=a.map(t=>u(g({},t),{isActive:t.id===e}));this._saveProgramsToStorage(o),this.toastService.success(`Program "${r.name}" is now active.`,3e3,"Program Activated")})}deactivateAllPrograms(){return h(this,null,function*(){let e=this.programsSubject.getValue();if(e.length>0){let a=e.map(r=>u(g({},r),{isActive:!1}));this._saveProgramsToStorage(a)}})}deactivateProgram(e){return h(this,null,function*(){let a=this.programsSubject.getValue(),r=a.find(t=>t.id===e);if(!r){this.toastService.error("Program not found to deactivate.",0,"Deactivation Error");return}if(!r.isActive){this.toastService.info(`Program "${r.name}" is already inactive.`,3e3,"Already Inactive");return}let o=a.map(t=>t.id===e?u(g({},t),{isActive:!1}):t);this._saveProgramsToStorage(o),this.toastService.info(`Program "${r.name}" has been deactivated.`,3e3,"Program Deactivated")})}getActiveProgram(){return this.programs$.pipe(m(e=>e.find(a=>a.isActive)))}getDataForBackup(){return this.programsSubject.getValue()}mergeData(e){if(!Array.isArray(e)){console.error("TrainingProgramService: Imported data for programs is not an array."),this.toastService.error("Import failed: Invalid program data file.",0,"Import Error");return}let a=this.programsSubject.getValue(),r=new Map(a.map(i=>[i.id,i])),o=0,t=0;e.forEach(i=>{if(!i.id||!i.name){console.warn("Skipping invalid program during import:",i);return}r.has(i.id)?o++:t++,r.set(i.id,i)});let s=Array.from(r.values());this._saveProgramsToStorage(s),console.log(`TrainingProgramService: Merged imported data. Updated: ${o}, Added: ${t}.`),this.toastService.success(`Import complete. ${o} programs updated, ${t} added.`,6e3,"Programs Merged")}getRoutineForDay(e){return this.getActiveProgram().pipe(T(a=>{if(!a)return p(null);let r;if(a.cycleLength&&a.cycleLength>0&&a.startDate){let t=new Date(a.startDate),s=Math.abs(e.getTime()-t.getTime()),l=Math.floor(s/(1e3*60*60*24))%a.cycleLength+1;r=n=>n.dayOfWeek===Number(l)}else{let t=D(e);r=s=>s.dayOfWeek===Number(t)}let o=a.schedule.find(r);return o?this.workoutService.getRoutineById(o.routineId).pipe(m(t=>t?{routine:t,scheduledDayInfo:o}:(console.warn(`Routine with ID ${o.routineId} not found for scheduled day.`),null))):p(null)}))}getScheduledRoutinesForDateRange(e,a){return this.getActiveProgram().pipe(T(r=>{if(!r||!r.schedule||r.schedule.length===0)return p([]);let o=[],t=new Date(e);for(;t<=a;){let s,i=new Date(t);if(r.cycleLength&&r.cycleLength>0&&r.startDate){let n=new Date(r.startDate),c=Math.abs(i.getTime()-n.getTime()),d=i>=n?Math.floor(c/(1e3*60*60*24)):-1;if(d>=0){let f=d%r.cycleLength+1;s=b=>b.dayOfWeek===f}else s=()=>!1}else{let n=D(i);s=c=>c.dayOfWeek===n}let l=r.schedule.find(s);l&&o.push(this.workoutService.getRoutineById(l.routineId).pipe(m(n=>n?{date:i,routine:n,scheduledDayInfo:l}:null))),t.setDate(t.getDate()+1)}return o.length===0?p([]):I(o).pipe(m(s=>s.filter(i=>i!==null)))}))}getScheduledRoutinesForDateRangeByProgramId(e,a,r){return this.getProgramById(e).pipe(m(o=>{if(!o||!o.schedule||o.schedule.length===0)return[];let t=k({start:a,end:r}),s=[],i=o.cycleLength&&o.cycleLength>0?o.cycleLength:7,l=o.startDate?E(o.startDate):new Date(1970,0,1),n=new Map;return o.schedule.forEach(c=>{let d=c.dayOfWeek%i;n.has(d)||n.set(d,[]),n.get(d).push(c)}),t.forEach(c=>{if(!(c<l))if(i===7){let d=D(c);n.has(d)&&n.get(d).forEach(f=>{s.push({date:c,scheduledDayInfo:f})})}else{let f=Math.floor((c.getTime()-l.getTime())/864e5)%i;n.has(f)&&n.get(f).forEach(b=>{s.push({date:c,scheduledDayInfo:b})})}}),s}))}static \u0275fac=function(a){return new(a||S)};static \u0275prov=w({token:S,factory:S.\u0275fac,providedIn:"root"})};export{F as a};
