import{A as W,Eb as m,I as v,L as P,M as k,T as A,Ub as I,V as b,_ as M,a as l,b as f,f as g,j as L,m as T,nb as x,p as d,qc as O,rc as R,sc as N,wc as D,xc as B,yc as U,zc as E}from"./chunk-H67LMWAW.js";function p(n,e){let t=()=>U(e?.in,NaN),r=e?.additionalDigits??2,s=K(n),i;if(s.date){let c=V(s.date,r);i=H(c.restDateString,c.year)}if(!i||isNaN(+i))return t();let o=+i,a=0,u;if(s.time&&(a=G(s.time),isNaN(a)))return t();if(s.timezone){if(u=z(s.timezone),isNaN(u))return t()}else{let c=new Date(o+a),S=E(0,e?.in);return S.setFullYear(c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()),S.setHours(c.getUTCHours(),c.getUTCMinutes(),c.getUTCSeconds(),c.getUTCMilliseconds()),S}return E(o+a+u,e?.in)}var w={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},j=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,C=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Y=/^([+-])(\d{2})(?::?(\d{2}))?$/;function K(n){let e={},t=n.split(w.dateTimeDelimiter),r;if(t.length>2)return e;if(/:/.test(t[0])?r=t[0]:(e.date=t[0],r=t[1],w.timeZoneDelimiter.test(e.date)&&(e.date=n.split(w.timeZoneDelimiter)[0],r=n.substr(e.date.length,n.length))),r){let s=w.timezone.exec(r);s?(e.time=r.replace(s[1],""),e.timezone=s[1]):e.time=r}return e}function V(n,e){let t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=n.match(t);if(!r)return{year:NaN,restDateString:""};let s=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:i===null?s:i*100,restDateString:n.slice((r[1]||r[2]).length)}}function H(n,e){if(e===null)return new Date(NaN);let t=n.match(j);if(!t)return new Date(NaN);let r=!!t[4],s=h(t[1]),i=h(t[2])-1,o=h(t[3]),a=h(t[4]),u=h(t[5])-1;if(r)return X(e,a,u)?Z(e,a,u):new Date(NaN);{let c=new Date(0);return!q(e,i,o)||!Q(e,s)?new Date(NaN):(c.setUTCFullYear(e,i,Math.max(s,o)),c)}}function h(n){return n?parseInt(n):1}function G(n){let e=n.match(C);if(!e)return NaN;let t=y(e[1]),r=y(e[2]),s=y(e[3]);return ee(t,r,s)?t*B+r*D+s*1e3:NaN}function y(n){return n&&parseFloat(n.replace(",","."))||0}function z(n){if(n==="Z")return 0;let e=n.match(Y);if(!e)return 0;let t=e[1]==="+"?-1:1,r=parseInt(e[2]),s=e[3]&&parseInt(e[3])||0;return te(r,s)?t*(r*B+s*D):NaN}function Z(n,e,t){let r=new Date(0);r.setUTCFullYear(n,0,4);let s=r.getUTCDay()||7,i=(e-1)*7+t+1-s;return r.setUTCDate(r.getUTCDate()+i),r}var J=[31,null,31,30,31,30,31,31,30,31,30,31];function _(n){return n%400===0||n%4===0&&n%100!==0}function q(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(J[e]||(_(n)?29:28))}function Q(n,e){return e>=1&&e<=(_(n)?366:365)}function X(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}function ee(n,e,t){return n===24?e===0&&t===0:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}function te(n,e){return e>=0&&e<=59}var F=class n{storageService=k(R);alertService=k(O);workoutService=k(N);WORKOUT_LOGS_STORAGE_KEY="fitTrackPro_workoutLogs";PERSONAL_BESTS_STORAGE_KEY="fitTrackPro_personalBests";workoutLogsSubject=new L(this.loadWorkoutLogsFromStorage());workoutLogs$=this.workoutLogsSubject.asObservable();personalBestsSubject=new L(this.loadPBsFromStorage());personalBests$=this.personalBestsSubject.asObservable();constructor(){}loadWorkoutLogsFromStorage(){let e=this.storageService.getItem(this.WORKOUT_LOGS_STORAGE_KEY);return e?e.sort((t,r)=>new Date(r.date).getTime()-new Date(t.date).getTime()):[]}saveWorkoutLogsToStorage(e){this.storageService.setItem(this.WORKOUT_LOGS_STORAGE_KEY,e),this.workoutLogsSubject.next([...e].sort((t,r)=>new Date(r.date).getTime()-new Date(t.date).getTime()))}addWorkoutLog(e){let t=I(),r=this.workoutLogsSubject.getValue(),s=e.exercises.map(a=>f(l({},a),{workoutLogId:t,sets:a.sets.map(u=>f(l({},u),{id:u.id??I(),workoutLogId:t}))})),i=f(l({},e),{exercises:s,id:t,date:new Date(e.startTime).toISOString().split("T")[0]});i.startTime&&i.endTime&&!i.durationMinutes&&(i.durationMinutes=Math.round((i.endTime-i.startTime)/(1e3*60)));let o=[i,...r];return this.saveWorkoutLogsToStorage(o),this.updateAllPersonalBestsFromLog(i),console.log("Added workout log:",i),i}getWorkoutLogById(e){return this.workoutLogs$.pipe(d(t=>t.find(r=>r.id===e)))}clearAllWorkoutLogs_DEV_ONLY(){return this.alertService.showConfirm("Info","DEVELOPMENT: Are you sure you want to delete ALL workout logs? This cannot be undone.").then(e=>g(this,null,function*(){e&&e.data&&(this.saveWorkoutLogsToStorage([]),yield this.alertService.showAlert("Info","All workout logs cleared!"))}))}getLastPerformanceForExercise(e){return this.workoutLogs$.pipe(d(t=>{for(let r of t){let s=r.exercises.find(i=>i.exerciseId===e);if(s&&s.sets.length>0)return{lastPerformedDate:r.date,workoutLogId:r.id,sets:[...s.sets]}}return null}))}findPreviousSetPerformance(e,t,r){return!e||!e.sets||e.sets.length===0?null:r<e.sets.length?e.sets[r]:null}loadPBsFromStorage(){return this.storageService.getItem(this.PERSONAL_BESTS_STORAGE_KEY)||{}}savePBsToStorage(e){this.storageService.setItem(this.PERSONAL_BESTS_STORAGE_KEY,e),this.personalBestsSubject.next(l({},e))}updateAllPersonalBestsFromLog(e){let t=l({},this.personalBestsSubject.getValue());e.exercises.forEach(r=>{t[r.exerciseId]||(t[r.exerciseId]=[]);let s=t[r.exerciseId],i=r.workoutLogId||e.id;r.sets.forEach(o=>{if(o.weightUsed===void 0||o.weightUsed===null||o.weightUsed===0){o.repsAchieved>0&&this.updateSpecificPB(s,o,"Max Reps (Bodyweight)"),o.durationPerformed&&o.durationPerformed>0&&this.updateSpecificPB(s,o,"Max Duration");return}if(o.repsAchieved===1&&this.updateSpecificPB(s,o,"1RM (Actual)"),o.repsAchieved===3&&this.updateSpecificPB(s,o,"3RM (Actual)"),o.repsAchieved===5&&this.updateSpecificPB(s,o,"5RM (Actual)"),this.updateSpecificPB(s,o,"Heaviest Lifted"),o.repsAchieved>1){let a=o.weightUsed*(1+o.repsAchieved/30),u=f(l({},o),{repsAchieved:1,weightUsed:parseFloat(a.toFixed(2))});this.updateSpecificPB(s,u,"1RM (Estimated)")}}),t[r.exerciseId]=s.sort((o,a)=>(a.weightUsed??0)-(o.weightUsed??0))}),this.savePBsToStorage(t),console.log("Personal Bests updated:",t)}updateSpecificPB(e,t,r){let s=f(l({},t),{pbType:r,workoutLogId:t.workoutLogId}),i=e.findIndex(a=>a.pbType===r),o=!1;if(i>-1){let a=e[i];r.includes("Max Reps")?(t.repsAchieved>a.repsAchieved||t.repsAchieved===a.repsAchieved&&(t.weightUsed??-1)>(a.weightUsed??-1))&&(o=!0):r.includes("Max Duration")?(t.durationPerformed??0)>(a.durationPerformed??0)&&(o=!0):(t.weightUsed??-1)>(a.weightUsed??-1)&&(o=!0),o&&(e[i]=s)}else o=!0,e.push(s)}getPersonalBestForExerciseByType(e,t){return this.personalBests$.pipe(d(r=>r[e]?.find(i=>i.pbType===t)||null))}getAllPersonalBestsForExercise(e){return this.personalBests$.pipe(d(t=>t[e]||[]))}getAllPersonalWorkouts(){return this.workoutLogs$}clearAllPersonalBests_DEV_ONLY(){return this.alertService.showConfirm("Info","DEVELOPMENT: Are you sure you want to delete ALL personal bests? This cannot be undone.").then(e=>g(this,null,function*(){e&&e.data&&(this.savePBsToStorage({}),yield this.alertService.showAlert("Info","All personal bests cleared!"))}))}getExercisePerformanceHistory(e){return this.workoutLogs$.pipe(d(t=>{let r=[];return t.filter(i=>i.exercises.some(o=>o.exerciseId===e)).sort((i,o)=>p(i.date).getTime()-p(o.date).getTime()).forEach(i=>{let o,a;i.exercises.forEach(u=>{u.exerciseId===e&&u.sets.forEach(c=>{c.weightUsed!==void 0&&c.weightUsed!==null&&(o===void 0||c.weightUsed>o?(o=c.weightUsed,a=c.repsAchieved):c.weightUsed===o&&(a===void 0||c.repsAchieved>a)&&(a=c.repsAchieved))})}),o!==void 0&&r.push({date:p(i.date),value:o,reps:a,logId:i.id})}),r}))}getLogsForBackup(){return this.workoutLogsSubject.getValue()}getPBsForBackup(){return this.personalBestsSubject.getValue()}replaceLogs(e){if(!Array.isArray(e)){console.error("TrackingService: Imported data for logs is not an array.");return}this.saveWorkoutLogsToStorage(e),console.log("TrackingService: Logs replaced with imported data.")}replacePBs(e){if(typeof e!="object"||e===null||Array.isArray(e)){console.error("TrackingService: Imported data for PBs is not an object.");return}this.savePBsToStorage(e),console.log("TrackingService: PBs replaced with imported data.")}getWorkoutLogsByRoutineId(e){return e?this.workoutLogs$.pipe(d(t=>t.filter(r=>r.routineId===e))):T([])}clearWorkoutLogsByRoutineId(e){return g(this,null,function*(){if(!e)return console.warn("TrackingService: clearWorkoutLogsByRoutineId called with no routineId."),this.alertService.showAlert("Warning","No routine ID provided to clear logs."),!1;let t=this.workoutLogsSubject.getValue(),r=t.filter(o=>o.routineId!==e),s=t.length-r.length,i="";if(this.workoutService.getRoutineById(e).pipe(W(1),d(o=>o?.name||"")).subscribe(o=>{i=o}),s===0)return this.alertService.showConfirm("Info","Are you sure you want to delete this routine? This action cannot be undone.").then(o=>(console.log(o),o&&o.data?(this.workoutService.deleteRoutine(e),this.alertService.showAlert("Info",`Routine "${i}" deleted successfully!`),!0):!1)),!1;{let o=yield this.alertService.showConfirm("Confirm Deletion",`Are you sure you want to delete this routine? There are ${s} workout log(s) associated with this routine: if you confirm you'll delete the routine and loose your previously logged workouts. This action cannot be undone.`);return o&&o.data?(this.saveWorkoutLogsToStorage(r),this.workoutService.deleteRoutine(e),this.alertService.showAlert("Success",`${s} workout log(s) for the routine have been cleared and the routine itself (${i}) it's been deleted.`),console.log(`Cleared ${s} logs for routineId: ${e}`),!0):!1}})}updateWorkoutLog(e){return g(this,null,function*(){if(!e||!e.id)throw console.error("TrackingService: updateWorkoutLog called with invalid data or missing ID."),new Error("Invalid log data for update.");let t=this.workoutLogsSubject.getValue(),r=t.findIndex(s=>s.id===e.id);if(r>-1){let s=[...t];s[r]=l({},e),this.saveWorkoutLogsToStorage(s),this.updateAllPersonalBestsFromLog(e),console.log("Updated workout log:",e)}else throw console.error(`TrackingService: WorkoutLog with ID ${e.id} not found for update.`),new Error(`WorkoutLog with ID ${e.id} not found.`)})}handleExerciseDeletion(e){return g(this,null,function*(){console.log(`Handling deletion repercussions for exercise ID: ${e}`);let t=this.workoutLogsSubject.getValue(),r=!1,s=t.map(o=>{let a=o.exercises.length,u=o.exercises.filter(c=>c.exerciseId!==e);return u.length<a?(r=!0,u.length===0?(console.log(`Workout log ${o.id} will be deleted as it becomes empty after removing exercise ${e}.`),null):f(l({},o),{exercises:u})):o}).filter(o=>o!==null);r&&(console.log("Some workout logs were modified or deleted due to exercise deletion."),this.saveWorkoutLogsToStorage(s));let i=this.personalBestsSubject.getValue();if(i[e]){let o=l({},i);delete o[e],this.savePBsToStorage(o),console.log(`Personal bests cleared for deleted exercise ID: ${e}`)}})}deleteWorkoutLog(e){return g(this,null,function*(){if(!e)throw console.error("TrackingService: deleteWorkoutLog called with invalid logId."),new Error("Invalid log ID for deletion.");let t=this.workoutLogsSubject.getValue();if(t.findIndex(o=>o.id===e)===-1){console.warn(`TrackingService: WorkoutLog with ID ${e} not found for deletion.`);return}let s=t.filter(o=>o.id!==e);this.saveWorkoutLogsToStorage(s);let i={};s.forEach(o=>this.updateAllPersonalBestsFromLog(o)),console.log(`Workout log with ID ${e} deleted.`)})}getWorkoutLogsByProgramIdForDateRange(e,t,r){return!e||!t||!r?T([]):this.workoutLogs$.pipe(d(s=>s.filter(i=>{let o=p(i.date);return i.programId===e&&o>=t&&o<=r})))}static \u0275fac=function(t){return new(t||n)};static \u0275prov=v({token:n,factory:n.\u0275fac,providedIn:"root"})};var $=class n{constructor(e,t){this.document=e;this.platformId=t;m(this.platformId)&&(this.isDarkTheme.set(this.getInitialThemeFromBrowser()),this.isMenuModeCompact.set(this.getInitialMenuModeFromBrowser())),x(()=>{let r=this.isDarkTheme(),s=this.isMenuModeCompact();m(this.platformId)&&(localStorage.setItem(this.THEME_KEY,r?"dark":"light"),localStorage.setItem(this.MENU_MODE_KEY,s?"true":"false"),r?this.document.documentElement.classList.add("dark"):this.document.documentElement.classList.remove("dark"))})}THEME_KEY="fitTrackPro-theme";MENU_MODE_KEY="fitTrackPro-menuMode";isDarkTheme=b(!1);isMenuModeCompact=b(!1);getInitialThemeFromBrowser(){let e=localStorage.getItem(this.THEME_KEY);return e?e==="dark":window.matchMedia?.("(prefers-color-scheme: dark)").matches??!1}getInitialMenuModeFromBrowser(){let e=localStorage.getItem(this.MENU_MODE_KEY);return e?e==="true":!1}toggleTheme(){m(this.platformId)?this.isDarkTheme.update(e=>!e):console.warn("ThemeService: toggleTheme called in non-browser environment. No action taken.")}toggleMenuMode(){m(this.platformId)?this.isMenuModeCompact.update(e=>!e):console.warn("ThemeService: toggleMenuMode called in non-browser environment. No action taken.")}static \u0275fac=function(t){return new(t||n)(P(A),P(M))};static \u0275prov=v({token:n,factory:n.\u0275fac,providedIn:"root"})};export{p as a,F as b,$ as c};
