import{D as E,Kc as O,L as B,Lc as D,Mc as W,Nb as P,Nc as U,O as b,P as w,Sc as k,W as y,Y as A,a as u,b as g,ba as x,g as h,k as I,nc as M,o as T,r as f,rb as R}from"./chunk-YQQSHWRV.js";var K=999,_=class p{storageService=w(D);alertService=w(O);workoutService=w(U);toastService=w(W);WORKOUT_LOGS_STORAGE_KEY="fitTrackPro_workoutLogs";PERSONAL_BESTS_STORAGE_KEY="fitTrackPro_personalBests";workoutLogsSubject=new I(this.loadWorkoutLogsFromStorage());workoutLogs$=this.workoutLogsSubject.asObservable();personalBestsSubject=new I(this.loadPBsFromStorage());personalBests$=this.personalBestsSubject.asObservable();constructor(){}loadWorkoutLogsFromStorage(){let e=this.storageService.getItem(this.WORKOUT_LOGS_STORAGE_KEY);return e?e.sort((o,r)=>new Date(r.date).getTime()-new Date(o.date).getTime()):[]}saveWorkoutLogsToStorage(e){this.storageService.setItem(this.WORKOUT_LOGS_STORAGE_KEY,e),this.workoutLogsSubject.next([...e].sort((o,r)=>new Date(r.date).getTime()-new Date(o.date).getTime()))}addWorkoutLog(e){let o=M(),r=this.workoutLogsSubject.getValue(),i=new Date(e.startTime).toISOString(),s=e.exercises.map(c=>g(u({},c),{workoutLogId:o,sets:c.sets.map(l=>g(u({},l),{id:l.id??M(),workoutLogId:o,timestamp:i,exerciseId:c.exerciseId}))})),t=g(u({},e),{exercises:s,id:o,date:i.split("T")[0]});t.startTime&&t.endTime&&!t.durationMinutes&&(t.durationMinutes=Math.round((t.endTime-t.startTime)/(1e3*60)),t.durationSeconds=Math.round((t.endTime-t.startTime)/1e3));let a=[t,...r];return this.saveWorkoutLogsToStorage(a),this.updateAllPersonalBestsFromLog(t),console.log("Added workout log:",t.id),t}getWorkoutLogById(e){return this.workoutLogs$.pipe(f(o=>o.find(r=>r.id===e)))}clearAllWorkoutLogs_DEV_ONLY(){return this.alertService.showConfirm("Info","DEVELOPMENT: Are you sure you want to delete ALL workout logs? This cannot be undone.").then(e=>h(this,null,function*(){e&&e.data&&(this.saveWorkoutLogsToStorage([]),yield this.recalculateAllPersonalBests(),yield this.alertService.showAlert("Info","All workout logs cleared!"))}))}getLastPerformanceForExercise(e){return this.workoutLogs$.pipe(f(o=>{for(let r of o){let i=r.exercises.find(s=>s.exerciseId===e);if(i&&i.sets.length>0)return{lastPerformedDate:r.date,workoutLogId:r.id,sets:[...i.sets]}}return null}))}findPreviousSetPerformance(e,o,r){return!e||!e.sets||e.sets.length===0?null:r<e.sets.length?e.sets[r]:null}loadPBsFromStorage(){return this.storageService.getItem(this.PERSONAL_BESTS_STORAGE_KEY)||{}}savePBsToStorage(e){this.storageService.setItem(this.PERSONAL_BESTS_STORAGE_KEY,e),this.personalBestsSubject.next(u({},e))}updateAllPersonalBestsFromLog(e){let o=u({},this.personalBestsSubject.getValue());e.exercises.forEach(r=>{o[r.exerciseId]||(o[r.exerciseId]=[]);let i=o[r.exerciseId];r.sets.forEach(s=>{let t=u({},s);if(t.weightUsed===void 0||t.weightUsed===null||t.weightUsed===0){t.repsAchieved>0&&this.updateSpecificPB(i,t,"Max Reps (Bodyweight)"),t.durationPerformed&&t.durationPerformed>0&&this.updateSpecificPB(i,t,"Max Duration");return}if(t.repsAchieved===1&&this.updateSpecificPB(i,t,"1RM (Actual)"),t.repsAchieved===3&&this.updateSpecificPB(i,t,"3RM (Actual)"),t.repsAchieved===5&&this.updateSpecificPB(i,t,"5RM (Actual)"),this.updateSpecificPB(i,t,"Heaviest Lifted"),t.repsAchieved>1){let a=t.weightUsed*(1+t.repsAchieved/30),c=g(u({},t),{repsAchieved:1,weightUsed:parseFloat(a.toFixed(2))});this.updateSpecificPB(i,c,"1RM (Estimated)")}}),o[r.exerciseId]=i.sort((s,t)=>(t.weightUsed??0)-(s.weightUsed??0))}),this.savePBsToStorage(o)}updateSpecificPB(e,o,r){if(!o.timestamp||!o.workoutLogId||!o.exerciseId){console.warn("PB Candidate set is missing critical context (timestamp, workoutLogId, or exerciseId):",o,"for pbType:",r);return}let i=g(u({},o),{pbType:r,history:[]}),s=e.findIndex(c=>c.pbType===r),t=!1,a;if(s>-1){let c=e[s],l=!1;if(r.includes("Max Reps")?(o.repsAchieved>c.repsAchieved||o.repsAchieved===c.repsAchieved&&(o.weightUsed??-1)>(c.weightUsed??-1))&&(l=!0):r.includes("Max Duration")?(o.durationPerformed??0)>(c.durationPerformed??0)&&(l=!0):((o.weightUsed??-1)>(c.weightUsed??-1)||(o.weightUsed??-1)===(c.weightUsed??-1)&&new Date(o.timestamp).getTime()>new Date(c.timestamp).getTime())&&(l=!0),l){t=!0,a=u({},c);let n={weightUsed:a.weightUsed,repsAchieved:a.repsAchieved,durationPerformed:a.durationPerformed,timestamp:a.timestamp,workoutLogId:a.workoutLogId};i.history=[n,...a.history||[]].slice(0,K),e[s]=i}}else t=!0,e.push(i)}recalculateAllPersonalBests(){return h(this,null,function*(){let e=yield this.alertService.showConfirm("Confirm Recalculation","Recalculate all personal bests from your entire workout history? This may take a moment.");if(!e||!e.data)return;this.savePBsToStorage({});let r=[...this.workoutLogsSubject.getValue()].sort((s,t)=>new Date(s.date).getTime()-new Date(t.date).getTime());if(!r||r.length===0)return this.alertService.showAlert("Info","There are no personal bests to be recalculated."),Promise.resolve();let i={};r.forEach(s=>{let t=new Date(s.startTime).toISOString();s.exercises.forEach(a=>{i[a.exerciseId]||(i[a.exerciseId]=[]);let c=i[a.exerciseId];a.sets.forEach(l=>{let n=g(u({},l),{timestamp:l.timestamp||t,workoutLogId:l.workoutLogId||s.id,exerciseId:l.exerciseId||a.exerciseId});if(n.weightUsed===void 0||n.weightUsed===null||n.weightUsed===0){n.repsAchieved>0&&this.updateSpecificPB(c,n,"Max Reps (Bodyweight)"),n.durationPerformed&&n.durationPerformed>0&&this.updateSpecificPB(c,n,"Max Duration");return}if(n.repsAchieved===1&&this.updateSpecificPB(c,n,"1RM (Actual)"),n.repsAchieved===3&&this.updateSpecificPB(c,n,"3RM (Actual)"),n.repsAchieved===5&&this.updateSpecificPB(c,n,"5RM (Actual)"),this.updateSpecificPB(c,n,"Heaviest Lifted"),n.repsAchieved>1){let v=n.weightUsed*(1+n.repsAchieved/30),m=g(u({},n),{repsAchieved:1,weightUsed:parseFloat(v.toFixed(2))});this.updateSpecificPB(c,m,"1RM (Estimated)")}})})});for(let s in i)i.hasOwnProperty(s)&&i[s].sort((t,a)=>(a.weightUsed??0)-(t.weightUsed??0));this.savePBsToStorage(i),console.log("Personal Bests recalculated from all logs:",i),this.alertService.showAlert("Success","All personal bests have been recalculated.")})}getPersonalBestForExerciseByType(e,o){return this.personalBests$.pipe(f(r=>r[e]?.find(i=>i.pbType===o)||null))}getAllPersonalBestsForExercise(e){return this.personalBests$.pipe(f(o=>o[e]||[]))}getAllPersonalWorkouts(){return this.workoutLogs$}clearAllPersonalBests_DEV_ONLY(){return this.alertService.showConfirm("Info","DEVELOPMENT: Are you sure you want to delete ALL personal bests? This cannot be undone.").then(e=>h(this,null,function*(){e&&e.data&&(this.savePBsToStorage({}),yield this.alertService.showAlert("Info","All personal bests cleared!"))}))}getExercisePerformanceHistory(e){return this.workoutLogs$.pipe(f(o=>{let r=[];return o.filter(s=>s.exercises.some(t=>t.exerciseId===e)).sort((s,t)=>k(s.date).getTime()-k(t.date).getTime()).forEach(s=>{let t,a;s.exercises.forEach(c=>{c.exerciseId===e&&c.sets.forEach(l=>{l.weightUsed!==void 0&&l.weightUsed!==null&&(t===void 0||l.weightUsed>t?(t=l.weightUsed,a=l.repsAchieved):l.weightUsed===t&&(a===void 0||l.repsAchieved>a)&&(a=l.repsAchieved))})}),t!==void 0&&r.push({date:k(s.date),value:t,reps:a,logId:s.id})}),r}))}getLogsForBackup(){return this.workoutLogsSubject.getValue()}getPBsForBackup(){return this.personalBestsSubject.getValue()}replaceLogs(e){return h(this,null,function*(){if(!Array.isArray(e)){console.error("TrackingService: Imported data for logs is not an array."),this.toastService.error("Import failed: Invalid workout log file.",0,"Import Error");return}let o=this.workoutLogsSubject.getValue(),r=new Map(o.map(n=>[n.id,n])),i=0,s=0;e.forEach(n=>{if(!n.id||!n.date){console.warn("Skipping invalid log during import:",n);return}r.has(n.id)?i++:s++,r.set(n.id,n)});let t=Array.from(r.values());this.saveWorkoutLogsToStorage(t),console.log(`TrackingService: Merged logs. Updated: ${i}, Added: ${s}.`),this.toastService.success(`Logs imported. ${i} updated, ${s} added.`,6e3,"Logs Merged"),console.log("Recalculating personal bests after log import..."),this.toastService.info("Recalculating personal bests...",2e3,"Please Wait");let c=[...this.workoutLogsSubject.getValue()].sort((n,v)=>new Date(n.date).getTime()-new Date(v.date).getTime());if(c.length===0){this.savePBsToStorage({}),this.toastService.success("Personal bests cleared as there are no logs.",3e3,"PBs Recalculated");return}let l={};c.forEach(n=>{let v=new Date(n.startTime).toISOString();n.exercises.forEach(m=>{l[m.exerciseId]||(l[m.exerciseId]=[]);let S=l[m.exerciseId];m.sets.forEach(L=>{let d=g(u({},L),{timestamp:L.timestamp||v,workoutLogId:L.workoutLogId||n.id,exerciseId:L.exerciseId||m.exerciseId});if(d.weightUsed===void 0||d.weightUsed===null||d.weightUsed===0){d.repsAchieved>0&&this.updateSpecificPB(S,d,"Max Reps (Bodyweight)"),d.durationPerformed&&d.durationPerformed>0&&this.updateSpecificPB(S,d,"Max Duration");return}if(d.repsAchieved===1&&this.updateSpecificPB(S,d,"1RM (Actual)"),d.repsAchieved===3&&this.updateSpecificPB(S,d,"3RM (Actual)"),d.repsAchieved===5&&this.updateSpecificPB(S,d,"5RM (Actual)"),this.updateSpecificPB(S,d,"Heaviest Lifted"),d.repsAchieved>1){let F=d.weightUsed*(1+d.repsAchieved/30),$=g(u({},d),{repsAchieved:1,weightUsed:parseFloat(F.toFixed(2))});this.updateSpecificPB(S,$,"1RM (Estimated)")}})})}),this.savePBsToStorage(l),console.log("Personal Bests recalculated from all merged logs."),this.toastService.success("Personal bests successfully recalculated!",3e3,"PBs Updated")})}replacePBs(e){if(typeof e!="object"||e===null||Array.isArray(e)){console.error("TrackingService: Imported data for PBs is not an object."),this.toastService.error("Import failed: Invalid personal bests file.",0,"Import Error");return}let o=this.personalBestsSubject.getValue();for(let r in e)if(Object.prototype.hasOwnProperty.call(e,r)){let i=e[r],s=o[r]||[],t=new Map(s.map(a=>[a.pbType,a]));i.forEach(a=>{t.set(a.pbType,a)}),o[r]=Array.from(t.values())}this.savePBsToStorage(o),console.log("TrackingService: PBs merged with imported data."),this.toastService.success("Personal bests data merged successfully.",3e3,"PBs Merged")}getWorkoutLogsByRoutineId(e){return e?this.workoutLogs$.pipe(f(o=>o.filter(r=>r.routineId===e))):T([])}clearWorkoutLogsByRoutineId(e){return h(this,null,function*(){if(!e)return this.alertService.showAlert("Warning","No routine ID provided to clear logs."),!1;let o=this.workoutLogsSubject.getValue(),r=o.filter(t=>t.routineId!==e),i=o.length-r.length,s="";try{s=(yield this.workoutService.getRoutineById(e).pipe(E(1)).toPromise())?.name||"Unknown Routine"}catch{console.warn("Could not fetch routine name")}if(i===0){let t=yield this.alertService.showConfirm("Confirm Deletion",`Are you sure you want to delete the routine "${s}"? This action cannot be undone.`);return t&&t.data?(yield this.workoutService.deleteRoutine(e),this.alertService.showAlert("Info",`Routine "${s}" deleted successfully!`),!0):!1}else{let t=yield this.alertService.showConfirm("Confirm Deletion",`Are you sure you want to delete the routine "${s}"? There are ${i} workout log(s) associated with it. Deleting the routine will also delete these logs. This action cannot be undone.`);return t&&t.data?(this.saveWorkoutLogsToStorage(r),yield this.workoutService.deleteRoutine(e),yield this.recalculateAllPersonalBests(),this.alertService.showAlert("Success",`${i} workout log(s) and the routine "${s}" have been deleted.`),!0):!1}})}updateWorkoutLog(e){return h(this,null,function*(){if(!e||!e.id)throw console.error("TrackingService: updateWorkoutLog called with invalid data or missing ID."),new Error("Invalid log data for update.");let o=this.workoutLogsSubject.getValue(),r=o.findIndex(i=>i.id===e.id);if(r>-1){let i=new Date(e.startTime).toISOString(),s=e.exercises.map(c=>g(u({},c),{sets:c.sets.map(l=>g(u({},l),{timestamp:l.timestamp||i,workoutLogId:l.workoutLogId||e.id,exerciseId:l.exerciseId||c.exerciseId}))})),t=g(u({},e),{exercises:s}),a=[...o];a[r]=t,this.saveWorkoutLogsToStorage(a),yield this.recalculateAllPersonalBests(),console.log("Updated workout log and recalculated PBs:",e.id)}else throw console.error(`TrackingService: WorkoutLog with ID ${e.id} not found for update.`),new Error(`WorkoutLog with ID ${e.id} not found.`)})}handleExerciseDeletion(e){return h(this,null,function*(){console.log(`Handling deletion repercussions for exercise ID: ${e}`);let o=this.workoutLogsSubject.getValue(),r=!1,i=o.map(s=>{let t=s.exercises.length,a=s.exercises.filter(c=>c.exerciseId!==e);return a.length<t?(r=!0,a.length===0?(console.log(`Workout log ${s.id} will be deleted as it becomes empty.`),null):g(u({},s),{exercises:a})):s}).filter(s=>s!==null);(r||o.length!==i.length)&&(console.log("Some workout logs were modified or deleted due to exercise deletion."),this.saveWorkoutLogsToStorage(i)),console.log("Recalculating PBs after exercise deletion."),yield this.recalculateAllPersonalBests()})}deleteWorkoutLog(e){return h(this,null,function*(){if(!e)throw new Error("Invalid log ID for deletion.");let o=this.workoutLogsSubject.getValue();if(!o.some(s=>s.id===e)){console.warn(`TrackingService: WorkoutLog with ID ${e} not found for deletion.`);return}let i=o.filter(s=>s.id!==e);this.saveWorkoutLogsToStorage(i),console.log(`Workout log with ID ${e} deleted. Recalculating PBs...`),yield this.recalculateAllPersonalBests()})}getWorkoutLogsByProgramIdForDateRange(e,o,r){return!e||!o||!r?T([]):this.workoutLogs$.pipe(f(i=>i.filter(s=>{let t=k(s.date);return s.programId===e&&t>=o&&t<=r})))}static \u0275fac=function(o){return new(o||p)};static \u0275prov=B({token:p,factory:p.\u0275fac,providedIn:"root"})};var j=class p{constructor(e,o){this.document=e;this.platformId=o;P(this.platformId)&&(this.isDarkTheme.set(this.getInitialThemeFromBrowser()),this.isMenuModeCompact.set(this.getInitialMenuModeFromBrowser())),R(()=>{let r=this.isDarkTheme(),i=this.isMenuModeCompact();P(this.platformId)&&(localStorage.setItem(this.THEME_KEY,r?"dark":"light"),localStorage.setItem(this.MENU_MODE_KEY,i?"true":"false"),r?this.document.documentElement.classList.add("dark"):this.document.documentElement.classList.remove("dark"))})}THEME_KEY="fitTrackPro-theme";MENU_MODE_KEY="fitTrackPro-menuMode";isDarkTheme=A(!1);isMenuModeCompact=A(!1);getInitialThemeFromBrowser(){let e=localStorage.getItem(this.THEME_KEY);return e?e==="dark":window.matchMedia?.("(prefers-color-scheme: dark)").matches??!1}getInitialMenuModeFromBrowser(){let e=localStorage.getItem(this.MENU_MODE_KEY);return e?e==="true":!1}toggleTheme(){P(this.platformId)?this.isDarkTheme.update(e=>!e):console.warn("ThemeService: toggleTheme called in non-browser environment. No action taken.")}toggleMenuMode(){P(this.platformId)?this.isMenuModeCompact.update(e=>!e):console.warn("ThemeService: toggleMenuMode called in non-browser environment. No action taken.")}static \u0275fac=function(o){return new(o||p)(b(y),b(x))};static \u0275prov=B({token:p,factory:p.\u0275fac,providedIn:"root"})};export{_ as a,j as b};
