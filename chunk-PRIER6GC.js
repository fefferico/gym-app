import{D as B,Kc as E,L as w,Lc as y,Mc as x,Nb as m,O as P,P as S,Sc as p,W as I,Y as L,a as u,b as d,ba as b,g,k as v,nc as T,o as k,r as h,rb as A}from"./chunk-Y4THQPVX.js";var U=999,M=class f{storageService=S(y);alertService=S(E);workoutService=S(x);WORKOUT_LOGS_STORAGE_KEY="fitTrackPro_workoutLogs";PERSONAL_BESTS_STORAGE_KEY="fitTrackPro_personalBests";workoutLogsSubject=new v(this.loadWorkoutLogsFromStorage());workoutLogs$=this.workoutLogsSubject.asObservable();personalBestsSubject=new v(this.loadPBsFromStorage());personalBests$=this.personalBestsSubject.asObservable();constructor(){}loadWorkoutLogsFromStorage(){let e=this.storageService.getItem(this.WORKOUT_LOGS_STORAGE_KEY);return e?e.sort((o,r)=>new Date(r.date).getTime()-new Date(o.date).getTime()):[]}saveWorkoutLogsToStorage(e){this.storageService.setItem(this.WORKOUT_LOGS_STORAGE_KEY,e),this.workoutLogsSubject.next([...e].sort((o,r)=>new Date(r.date).getTime()-new Date(o.date).getTime()))}addWorkoutLog(e){let o=T(),r=this.workoutLogsSubject.getValue(),i=new Date(e.startTime).toISOString(),s=e.exercises.map(a=>d(u({},a),{workoutLogId:o,sets:a.sets.map(c=>d(u({},c),{id:c.id??T(),workoutLogId:o,timestamp:i,exerciseId:a.exerciseId}))})),t=d(u({},e),{exercises:s,id:o,date:i.split("T")[0]});t.startTime&&t.endTime&&!t.durationMinutes&&(t.durationMinutes=Math.round((t.endTime-t.startTime)/(1e3*60)),t.durationSeconds=Math.round((t.endTime-t.startTime)/1e3));let n=[t,...r];return this.saveWorkoutLogsToStorage(n),this.updateAllPersonalBestsFromLog(t),console.log("Added workout log:",t.id),t}getWorkoutLogById(e){return this.workoutLogs$.pipe(h(o=>o.find(r=>r.id===e)))}clearAllWorkoutLogs_DEV_ONLY(){return this.alertService.showConfirm("Info","DEVELOPMENT: Are you sure you want to delete ALL workout logs? This cannot be undone.").then(e=>g(this,null,function*(){e&&e.data&&(this.saveWorkoutLogsToStorage([]),yield this.recalculateAllPersonalBests(),yield this.alertService.showAlert("Info","All workout logs cleared!"))}))}getLastPerformanceForExercise(e){return this.workoutLogs$.pipe(h(o=>{for(let r of o){let i=r.exercises.find(s=>s.exerciseId===e);if(i&&i.sets.length>0)return{lastPerformedDate:r.date,workoutLogId:r.id,sets:[...i.sets]}}return null}))}findPreviousSetPerformance(e,o,r){return!e||!e.sets||e.sets.length===0?null:r<e.sets.length?e.sets[r]:null}loadPBsFromStorage(){return this.storageService.getItem(this.PERSONAL_BESTS_STORAGE_KEY)||{}}savePBsToStorage(e){this.storageService.setItem(this.PERSONAL_BESTS_STORAGE_KEY,e),this.personalBestsSubject.next(u({},e))}updateAllPersonalBestsFromLog(e){let o=u({},this.personalBestsSubject.getValue());e.exercises.forEach(r=>{o[r.exerciseId]||(o[r.exerciseId]=[]);let i=o[r.exerciseId];r.sets.forEach(s=>{let t=u({},s);if(t.weightUsed===void 0||t.weightUsed===null||t.weightUsed===0){t.repsAchieved>0&&this.updateSpecificPB(i,t,"Max Reps (Bodyweight)"),t.durationPerformed&&t.durationPerformed>0&&this.updateSpecificPB(i,t,"Max Duration");return}if(t.repsAchieved===1&&this.updateSpecificPB(i,t,"1RM (Actual)"),t.repsAchieved===3&&this.updateSpecificPB(i,t,"3RM (Actual)"),t.repsAchieved===5&&this.updateSpecificPB(i,t,"5RM (Actual)"),this.updateSpecificPB(i,t,"Heaviest Lifted"),t.repsAchieved>1){let n=t.weightUsed*(1+t.repsAchieved/30),a=d(u({},t),{repsAchieved:1,weightUsed:parseFloat(n.toFixed(2))});this.updateSpecificPB(i,a,"1RM (Estimated)")}}),o[r.exerciseId]=i.sort((s,t)=>(t.weightUsed??0)-(s.weightUsed??0))}),this.savePBsToStorage(o)}updateSpecificPB(e,o,r){if(!o.timestamp||!o.workoutLogId||!o.exerciseId){console.warn("PB Candidate set is missing critical context (timestamp, workoutLogId, or exerciseId):",o,"for pbType:",r);return}let i=d(u({},o),{pbType:r,history:[]}),s=e.findIndex(a=>a.pbType===r),t=!1,n;if(s>-1){let a=e[s],c=!1;if(r.includes("Max Reps")?(o.repsAchieved>a.repsAchieved||o.repsAchieved===a.repsAchieved&&(o.weightUsed??-1)>(a.weightUsed??-1))&&(c=!0):r.includes("Max Duration")?(o.durationPerformed??0)>(a.durationPerformed??0)&&(c=!0):((o.weightUsed??-1)>(a.weightUsed??-1)||(o.weightUsed??-1)===(a.weightUsed??-1)&&new Date(o.timestamp).getTime()>new Date(a.timestamp).getTime())&&(c=!0),c){t=!0,n=u({},a);let l={weightUsed:n.weightUsed,repsAchieved:n.repsAchieved,durationPerformed:n.durationPerformed,timestamp:n.timestamp,workoutLogId:n.workoutLogId};i.history=[l,...n.history||[]].slice(0,U),e[s]=i}}else t=!0,e.push(i)}recalculateAllPersonalBests(){return g(this,null,function*(){let e=yield this.alertService.showConfirm("Confirm Recalculation","Recalculate all personal bests from your entire workout history? This may take a moment.");if(!e||!e.data)return;this.savePBsToStorage({});let r=[...this.workoutLogsSubject.getValue()].sort((s,t)=>new Date(s.date).getTime()-new Date(t.date).getTime());if(!r||r.length===0)return this.alertService.showAlert("Info","There are no personal bests to be recalculated."),Promise.resolve();let i={};r.forEach(s=>{let t=new Date(s.startTime).toISOString();s.exercises.forEach(n=>{i[n.exerciseId]||(i[n.exerciseId]=[]);let a=i[n.exerciseId];n.sets.forEach(c=>{let l=d(u({},c),{timestamp:c.timestamp||t,workoutLogId:c.workoutLogId||s.id,exerciseId:c.exerciseId||n.exerciseId});if(l.weightUsed===void 0||l.weightUsed===null||l.weightUsed===0){l.repsAchieved>0&&this.updateSpecificPB(a,l,"Max Reps (Bodyweight)"),l.durationPerformed&&l.durationPerformed>0&&this.updateSpecificPB(a,l,"Max Duration");return}if(l.repsAchieved===1&&this.updateSpecificPB(a,l,"1RM (Actual)"),l.repsAchieved===3&&this.updateSpecificPB(a,l,"3RM (Actual)"),l.repsAchieved===5&&this.updateSpecificPB(a,l,"5RM (Actual)"),this.updateSpecificPB(a,l,"Heaviest Lifted"),l.repsAchieved>1){let W=l.weightUsed*(1+l.repsAchieved/30),R=d(u({},l),{repsAchieved:1,weightUsed:parseFloat(W.toFixed(2))});this.updateSpecificPB(a,R,"1RM (Estimated)")}})})});for(let s in i)i.hasOwnProperty(s)&&i[s].sort((t,n)=>(n.weightUsed??0)-(t.weightUsed??0));this.savePBsToStorage(i),console.log("Personal Bests recalculated from all logs:",i),this.alertService.showAlert("Success","All personal bests have been recalculated.")})}getPersonalBestForExerciseByType(e,o){return this.personalBests$.pipe(h(r=>r[e]?.find(i=>i.pbType===o)||null))}getAllPersonalBestsForExercise(e){return this.personalBests$.pipe(h(o=>o[e]||[]))}getAllPersonalWorkouts(){return this.workoutLogs$}clearAllPersonalBests_DEV_ONLY(){return this.alertService.showConfirm("Info","DEVELOPMENT: Are you sure you want to delete ALL personal bests? This cannot be undone.").then(e=>g(this,null,function*(){e&&e.data&&(this.savePBsToStorage({}),yield this.alertService.showAlert("Info","All personal bests cleared!"))}))}getExercisePerformanceHistory(e){return this.workoutLogs$.pipe(h(o=>{let r=[];return o.filter(s=>s.exercises.some(t=>t.exerciseId===e)).sort((s,t)=>p(s.date).getTime()-p(t.date).getTime()).forEach(s=>{let t,n;s.exercises.forEach(a=>{a.exerciseId===e&&a.sets.forEach(c=>{c.weightUsed!==void 0&&c.weightUsed!==null&&(t===void 0||c.weightUsed>t?(t=c.weightUsed,n=c.repsAchieved):c.weightUsed===t&&(n===void 0||c.repsAchieved>n)&&(n=c.repsAchieved))})}),t!==void 0&&r.push({date:p(s.date),value:t,reps:n,logId:s.id})}),r}))}getLogsForBackup(){return this.workoutLogsSubject.getValue()}getPBsForBackup(){return this.personalBestsSubject.getValue()}replaceLogs(e){if(!Array.isArray(e)){console.error("TrackingService: Imported data for logs is not an array.");return}this.saveWorkoutLogsToStorage(e),this.recalculateAllPersonalBests(),console.log("TrackingService: Logs replaced, PBs recalculated.")}replacePBs(e){if(typeof e!="object"||e===null||Array.isArray(e)){console.error("TrackingService: Imported data for PBs is not an object.");return}this.savePBsToStorage(e),console.log("TrackingService: PBs replaced with imported data.")}getWorkoutLogsByRoutineId(e){return e?this.workoutLogs$.pipe(h(o=>o.filter(r=>r.routineId===e))):k([])}clearWorkoutLogsByRoutineId(e){return g(this,null,function*(){if(!e)return this.alertService.showAlert("Warning","No routine ID provided to clear logs."),!1;let o=this.workoutLogsSubject.getValue(),r=o.filter(t=>t.routineId!==e),i=o.length-r.length,s="";try{s=(yield this.workoutService.getRoutineById(e).pipe(B(1)).toPromise())?.name||"Unknown Routine"}catch{console.warn("Could not fetch routine name")}if(i===0){let t=yield this.alertService.showConfirm("Confirm Deletion",`Are you sure you want to delete the routine "${s}"? This action cannot be undone.`);return t&&t.data?(yield this.workoutService.deleteRoutine(e),this.alertService.showAlert("Info",`Routine "${s}" deleted successfully!`),!0):!1}else{let t=yield this.alertService.showConfirm("Confirm Deletion",`Are you sure you want to delete the routine "${s}"? There are ${i} workout log(s) associated with it. Deleting the routine will also delete these logs. This action cannot be undone.`);return t&&t.data?(this.saveWorkoutLogsToStorage(r),yield this.workoutService.deleteRoutine(e),yield this.recalculateAllPersonalBests(),this.alertService.showAlert("Success",`${i} workout log(s) and the routine "${s}" have been deleted.`),!0):!1}})}updateWorkoutLog(e){return g(this,null,function*(){if(!e||!e.id)throw console.error("TrackingService: updateWorkoutLog called with invalid data or missing ID."),new Error("Invalid log data for update.");let o=this.workoutLogsSubject.getValue(),r=o.findIndex(i=>i.id===e.id);if(r>-1){let i=new Date(e.startTime).toISOString(),s=e.exercises.map(a=>d(u({},a),{sets:a.sets.map(c=>d(u({},c),{timestamp:c.timestamp||i,workoutLogId:c.workoutLogId||e.id,exerciseId:c.exerciseId||a.exerciseId}))})),t=d(u({},e),{exercises:s}),n=[...o];n[r]=t,this.saveWorkoutLogsToStorage(n),yield this.recalculateAllPersonalBests(),console.log("Updated workout log and recalculated PBs:",e.id)}else throw console.error(`TrackingService: WorkoutLog with ID ${e.id} not found for update.`),new Error(`WorkoutLog with ID ${e.id} not found.`)})}handleExerciseDeletion(e){return g(this,null,function*(){console.log(`Handling deletion repercussions for exercise ID: ${e}`);let o=this.workoutLogsSubject.getValue(),r=!1,i=o.map(s=>{let t=s.exercises.length,n=s.exercises.filter(a=>a.exerciseId!==e);return n.length<t?(r=!0,n.length===0?(console.log(`Workout log ${s.id} will be deleted as it becomes empty.`),null):d(u({},s),{exercises:n})):s}).filter(s=>s!==null);(r||o.length!==i.length)&&(console.log("Some workout logs were modified or deleted due to exercise deletion."),this.saveWorkoutLogsToStorage(i)),console.log("Recalculating PBs after exercise deletion."),yield this.recalculateAllPersonalBests()})}deleteWorkoutLog(e){return g(this,null,function*(){if(!e)throw new Error("Invalid log ID for deletion.");let o=this.workoutLogsSubject.getValue();if(!o.some(s=>s.id===e)){console.warn(`TrackingService: WorkoutLog with ID ${e} not found for deletion.`);return}let i=o.filter(s=>s.id!==e);this.saveWorkoutLogsToStorage(i),console.log(`Workout log with ID ${e} deleted. Recalculating PBs...`),yield this.recalculateAllPersonalBests()})}getWorkoutLogsByProgramIdForDateRange(e,o,r){return!e||!o||!r?k([]):this.workoutLogs$.pipe(h(i=>i.filter(s=>{let t=p(s.date);return s.programId===e&&t>=o&&t<=r})))}static \u0275fac=function(o){return new(o||f)};static \u0275prov=w({token:f,factory:f.\u0275fac,providedIn:"root"})};var O=class f{constructor(e,o){this.document=e;this.platformId=o;m(this.platformId)&&(this.isDarkTheme.set(this.getInitialThemeFromBrowser()),this.isMenuModeCompact.set(this.getInitialMenuModeFromBrowser())),A(()=>{let r=this.isDarkTheme(),i=this.isMenuModeCompact();m(this.platformId)&&(localStorage.setItem(this.THEME_KEY,r?"dark":"light"),localStorage.setItem(this.MENU_MODE_KEY,i?"true":"false"),r?this.document.documentElement.classList.add("dark"):this.document.documentElement.classList.remove("dark"))})}THEME_KEY="fitTrackPro-theme";MENU_MODE_KEY="fitTrackPro-menuMode";isDarkTheme=L(!1);isMenuModeCompact=L(!1);getInitialThemeFromBrowser(){let e=localStorage.getItem(this.THEME_KEY);return e?e==="dark":window.matchMedia?.("(prefers-color-scheme: dark)").matches??!1}getInitialMenuModeFromBrowser(){let e=localStorage.getItem(this.MENU_MODE_KEY);return e?e==="true":!1}toggleTheme(){m(this.platformId)?this.isDarkTheme.update(e=>!e):console.warn("ThemeService: toggleTheme called in non-browser environment. No action taken.")}toggleMenuMode(){m(this.platformId)?this.isMenuModeCompact.update(e=>!e):console.warn("ThemeService: toggleMenuMode called in non-browser environment. No action taken.")}static \u0275fac=function(o){return new(o||f)(P(I),P(b))};static \u0275prov=w({token:f,factory:f.\u0275fac,providedIn:"root"})};export{M as a,O as b};
