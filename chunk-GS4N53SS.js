import{a as V,v as Y}from"./chunk-IWRBMPC3.js";import{Dc as x,E as F,K as k,N as B,O as v,_ as I,c as _,d as M,gd as $,id as D,lc as C,ld as j,m as N,md as W}from"./chunk-VK5SUMV2.js";import{a as b,b as E,g as w}from"./chunk-GAL4ENT6.js";var O=class o{constructor(e){this.storageService=e;this._loadPreferences()}WEIGHT_UNIT_KEY="fitTrackPro_weightUnit";MEASURE_UNIT_KEY="fitTrackPro_measureUnit";DISTANCE_MEASURE_UNIT_KEY="fitTrackPro_distanceMeasureUnit";BODY_WEIGHT_UNIT_KEY="fitTrackPro_bodyWeightUnit";BODY_MEASURE_UNIT_KEY="fitTrackPro_bodyMeasureUnit";currentWeightUnit=I("kg");currentMeasureUnit=I("cm");currentDistanceMeasureUnit=I("km");currentBodyWeightUnit=I("kg");currentBodyMeasureUnit=I("cm");translate=v(D);_loadPreferences(){let e=this.storageService.getItem(this.WEIGHT_UNIT_KEY);this.currentWeightUnit.set(e||"kg");let t=this.storageService.getItem(this.MEASURE_UNIT_KEY);this.currentMeasureUnit.set(t||"cm");let r=this.storageService.getItem(this.DISTANCE_MEASURE_UNIT_KEY);this.currentDistanceMeasureUnit.set(r||"km");let s=this.storageService.getItem(this.BODY_WEIGHT_UNIT_KEY);this.currentBodyWeightUnit.set(s||"kg");let n=this.storageService.getItem(this.BODY_MEASURE_UNIT_KEY);this.currentBodyMeasureUnit.set(n||"cm")}setWeightUnitPreference(e){this.storageService.setItem(this.WEIGHT_UNIT_KEY,e),this.currentWeightUnit.set(e)}setMeasureUnitPreference(e){this.storageService.setItem(this.MEASURE_UNIT_KEY,e),this.currentMeasureUnit.set(e)}setDistanceMeasureUnitPreference(e){this.storageService.setItem(this.DISTANCE_MEASURE_UNIT_KEY,e),this.currentDistanceMeasureUnit.set(e)}setBodyWeightUnitPreference(e){this.storageService.setItem(this.BODY_WEIGHT_UNIT_KEY,e),this.currentBodyWeightUnit.set(e)}setBodyMeasureUnitPreference(e){this.storageService.setItem(this.BODY_MEASURE_UNIT_KEY,e),this.currentBodyMeasureUnit.set(e)}getWeightUnitSuffix(){let e=this.currentWeightUnit()==="kg"?"units.weight.kg":"units.weight.lbs";return this.translate.instant(e)}getMeasureUnitSuffix(){let e=this.currentMeasureUnit()==="cm"?"units.measure.cm":"units.measure.in";return this.translate.instant(e)}getDistanceMeasureUnitSuffix(){let e=this.currentDistanceMeasureUnit()==="km"?"units.distance.km":"units.distance.mi";return this.translate.instant(e)}getBodyWeightUnitSuffix(){let e=this.currentBodyWeightUnit()==="kg"?"units.weight.kg":"units.weight.lbs";return this.translate.instant(e)}getBodyMeasureUnitSuffix(){let e=this.currentBodyMeasureUnit()==="cm"?"units.measure.cm":"units.measure.in";return this.translate.instant(e)}convertWeight(e,t,r){if(!e)return 0;if(t===r)return e;let s=2.20462,n=t==="kg"?e*s:e/s;return parseFloat(n.toFixed(2))}convertMeasure(e,t,r){if(t===r||!e)return e;let s=.393701,n=t==="cm"?e*s:e/s;return parseFloat(n.toFixed(2))}convertDistance(e,t,r){if(t===r||!e)return e;let s=.621371,n=t==="km"?e*s:e/s;return parseFloat(n.toFixed(3))}static \u0275fac=function(t){return new(t||o)(B(W))};static \u0275prov=k({token:o,factory:o.\u0275fac,providedIn:"root"})};var T=(a=>(a.weight="weight",a.reps="reps",a.duration="duration",a.distance="distance",a.tempo="tempo",a.rest="rest",a))(T||{});var Q=(r=>(r.PerformingSet="performing_set",r.PresetCountdown="preset_countdown",r.Resting="resting",r))(Q||{});var u=T,G=[{id:"beginner-workout-v1-a",name:"Beginner Weight Training - Workout A (V1)",description:"A foundational full-body workout focusing on major compound lifts. Perform this workout on your first training day of the week.",goal:"strength",exercises:[{id:"bwa-ex1",exerciseId:"barbell-back-squat",exerciseName:"Squats",sets:[{id:"bwa-ex1-s1",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex1-s2",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex1-s3",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"},{id:"bwa-ex2",exerciseId:"barbell-bench-press",exerciseName:"Bench Press",sets:[{id:"bwa-ex2-s1",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex2-s2",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex2-s3",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"},{id:"bwa-ex3",exerciseId:"bent-over-row-barbell",exerciseName:"Rows",sets:[{id:"bwa-ex3-s1",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex3-s2",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwa-ex3-s3",fieldOrder:[u.weight,u.reps,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"}]},{id:"beginner-workout-v1-b",name:"Beginner Weight Training - Workout B (V1)",description:"A complementary full-body workout to be alternated with Workout A. Focuses on pulling strength and overhead pressing.",goal:"strength",exercises:[{id:"bwb-ex1",exerciseId:"barbell-deadlift",exerciseName:"Deadlifts",sets:[{id:"bwb-ex1-s1",fieldOrder:[u.weight,u.reps,u.rest],targetReps:8,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 6-8 reps."},{id:"bwb-ex1-s2",fieldOrder:[u.weight,u.reps,u.rest],targetReps:8,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 6-8 reps."},{id:"bwb-ex1-s3",fieldOrder:[u.weight,u.reps,u.rest],targetReps:8,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 6-8 reps."}],supersetId:null,supersetOrder:null,type:"standard"},{id:"bwb-ex2",exerciseId:"pull-up",exerciseName:"Pull-ups (or lat pull-downs)",sets:[{id:"bwb-ex2-s1",fieldOrder:[u.reps,u.rest],targetReps:10,targetWeight:null,targetRest:120,type:"standard",notes:"If you cannot do pull-ups, substitute with Lat Pulldowns. Aim for 8-10 reps."},{id:"bwb-ex2-s2",fieldOrder:[u.reps,u.rest],targetReps:10,targetWeight:null,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwb-ex2-s3",fieldOrder:[u.reps,u.rest],targetReps:10,targetWeight:null,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"},{id:"bwb-ex3",exerciseId:"overhead-press-barbell",exerciseName:"Shoulder Press",sets:[{id:"bwb-ex3-s1",fieldOrder:[u.reps,u.weight,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwb-ex3-s2",fieldOrder:[u.reps,u.weight,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."},{id:"bwb-ex3-s3",fieldOrder:[u.reps,u.weight,u.rest],targetReps:10,targetWeight:10,targetRest:120,type:"standard",notes:"Aim for 8-10 reps."}],supersetId:null,supersetOrder:null,type:"standard"}]}];var H=(s=>(s.WEIGHT="weight",s.REPS="reps",s.DISTANCE="distance",s.DURATION="duration",s))(H||{}),U=class o{storageService=v(W);SETTINGS_KEY="fitTrackPro_progressiveOverloadSettings";defaultSettings={enabled:!1,strategies:[],weightIncrement:null,repsIncrement:null,distanceIncrement:null,durationIncrement:null,sessionsToIncrement:1};settingsSubject;settings$;constructor(){let e=this.storageService.getItem(this.SETTINGS_KEY),t=e?E(b(b({},this.defaultSettings),e),{strategies:e.strategies||[]}):this.defaultSettings;this.settingsSubject=new M(t),this.settings$=this.settingsSubject.asObservable()}getSettings(){return this.settingsSubject.getValue()}saveSettings(e){let t=this.getSettings(),r=b(b({},t),e);this.storageService.setItem(this.SETTINGS_KEY,r),this.settingsSubject.next(r)}getDataForBackup(){return this.getSettings()}replaceData(e){let t=e?E(b(b({},this.defaultSettings),e),{strategies:e.strategies||[]}):this.defaultSettings;this.storageService.setItem(this.SETTINGS_KEY,t),this.settingsSubject.next(t)}clearSettings_DEV_ONLY(){this.replaceData(null),console.log("Progressive Overload settings cleared.")}applyOverloadToExercise(e,t){!t.enabled||!t.strategies||t.strategies.length===0||e.sets.forEach(r=>{r.type!=="warmup"&&t.strategies.forEach(s=>{switch(s){case"weight":if(t.weightIncrement&&(r.targetWeight||r.targetWeightMin)){let n=r.targetWeight;r.targetWeight=(n??0)+t.weightIncrement,r.targetWeightMin&&(r.targetWeightMin=(r.targetWeightMin??n??0)+t.weightIncrement,r.targetWeightMax&&r.targetWeightMin>r.targetWeightMax&&(r.targetWeightMax=r.targetWeightMin+t.weightIncrement))}break;case"reps":if(t.repsIncrement&&(r.targetReps||r.targetRepsMin)){let n=r.targetReps;r.targetReps=(n??0)+t.repsIncrement,r.targetRepsMin&&(r.targetRepsMin=(r.targetRepsMin??n??0)+t.repsIncrement,r.targetRepsMax&&r.targetRepsMin>r.targetRepsMax&&(r.targetRepsMax=r.targetRepsMin+t.repsIncrement))}break;case"distance":if(t.distanceIncrement&&(r.targetDistance||r.targetDistanceMin)){let n=r.targetDistance;r.targetDistance=(n??0)+t.distanceIncrement,r.targetDistanceMin&&(r.targetDistanceMin=(r.targetDistanceMin??n??0)+t.distanceIncrement,r.targetDistanceMax&&r.targetDistanceMin>r.targetDistanceMax&&(r.targetDistanceMax=r.targetDistanceMin+t.distanceIncrement))}break;case"duration":if(t.durationIncrement&&(r.targetDuration||r.targetDurationMin)){let n=r.targetDuration;r.targetDuration=(n??0)+t.durationIncrement,r.targetDurationMin&&(r.targetDurationMin=(r.targetDurationMin??n??0)+t.durationIncrement,r.targetDurationMax&&r.targetDurationMin>r.targetDurationMax&&(r.targetDurationMax=r.targetDurationMin+t.durationIncrement))}break;default:break}})})}static \u0275fac=function(t){return new(t||o)};static \u0275prov=k({token:o,factory:o.\u0275fac,providedIn:"root"})};function X(o){let e=b({},o);return e.hasOwnProperty("reps")&&!e.hasOwnProperty("targetReps")&&(e.targetReps=e.reps,delete e.reps),e.hasOwnProperty("weight")&&!e.hasOwnProperty("targetWeight")&&(e.targetWeight=e.weight,delete e.weight),e.hasOwnProperty("duration")&&!e.hasOwnProperty("targetDuration")&&(e.targetDuration=e.duration,delete e.duration),e.hasOwnProperty("distance")&&!e.hasOwnProperty("targetDistance")&&(e.targetDistance=e.distance,delete e.distance),(e.targetRest===void 0||e.targetRest===null)&&(typeof e.targetRestAfterSet=="number"?e.targetRest=e.targetRestAfterSet:typeof e.restAfterSet=="number"&&(e.targetRest=e.restAfterSet)),(e.restLogged===void 0||e.restLogged===null)&&(typeof e.restLogged=="number"?e.restLogged=e.restLogged:typeof e.targetRestAfterSet=="number"&&(e.restLogged=e.targetRestAfterSet)),delete e.targetRestAfterSet,delete e.restAfterSet,e}function Se(o){return!o||!Array.isArray(o)?[]:o.map(e=>{let t=b({},e);return t.sets&&Array.isArray(t.sets)&&(t.sets=t.sets.map(X)),t})}function Re(o){return{id:o.id,type:o.type,targetReps:o.targetReps||0,targetRepsMin:o.targetRepsMin||0,targetRepsMax:o.targetRepsMax||0,targetWeight:o.targetWeight||0,targetWeightMin:o.targetWeightMin||0,targetWeightMax:o.targetWeightMax||0,targetDistance:o.targetDistance||0,targetDistanceMin:o.targetDistanceMin||0,targetDistanceMax:o.targetDistanceMax||0,targetDuration:o.targetDuration||0,targetDurationMin:o.targetDurationMin||0,targetDurationMax:o.targetDurationMax||0,targetRest:o.targetRest||0,targetRestMin:o.targetRestMin||0,targetRestMax:o.targetRestMax||0,notes:o.notes||"",tempo:o.targetTempo}}function q(o){let e=o.sets.map(r=>Z(r));return{id:x(),exerciseId:o.exerciseId,exerciseName:o.exerciseName,sets:e,notes:o.notes,type:o.type,supersetId:o.supersetId||null,supersetOrder:o.supersetOrder??null,supersetType:null,emomTimeSeconds:null}}function Z(o){return{id:x(),targetReps:o.repsLogged,targetWeight:o.weightLogged,targetDuration:o.durationLogged,targetDistance:o.distanceLogged,targetRest:o.restLogged,targetRpe:o.rpe,targetTempo:o.tempoLogged,targetRepsMin:null,targetRepsMax:null,targetWeightMin:null,targetWeightMax:null,targetDurationMin:null,targetDurationMax:null,targetDistanceMin:null,targetDistanceMax:null,targetRestMin:null,targetRestMax:null,dropToWeight:null,amrapTimeLimit:null,notes:o.notes,type:o.type,fieldOrder:o.fieldOrder}}var J=class o{storageService=v(W);appSettingsService=v(V);router=v(C);alertService=v(j);unitsService=v(O);translate=v(D);subscriptionService=v(Y);ROUTINES_STORAGE_KEY="fitTrackPro_routines";PAUSED_WORKOUT_KEY="fitTrackPro_pausedWorkoutState";PAUSED_STATE_VERSION="1.2";toastService=v($);progressiveOverloadService=v(U);routinesSubject=new M(this.loadRoutinesFromStorage());routines$=this.routinesSubject.asObservable();isLoadingRoutinesSubject=new M(!0);isLoadingRoutines$=this.isLoadingRoutinesSubject.asObservable();_pausedWorkoutDiscarded=new _;pausedWorkoutDiscarded$=this._pausedWorkoutDiscarded.asObservable();constructor(){this.isLoadingRoutinesSubject.next(!0);let e=this.loadRoutinesFromStorage();this.routinesSubject=new M(e),this.routines$=this.routinesSubject.asObservable().pipe(F(1)),this._seedAndMergeRoutinesFromStaticData(e)}refreshRoutinesSort(){let e=this.routinesSubject.getValue();this._saveRoutinesToStorage(e),console.log("WorkoutService: Routines list re-sorted and refreshed.")}_sortRoutines(e){return e.slice().sort((t,r)=>{if(t.isFavourite&&!r.isFavourite)return-1;if(!t.isFavourite&&r.isFavourite)return 1;let s=!!t.lastPerformed,n=!!r.lastPerformed;if(s&&!n)return-1;if(!s&&n)return 1;if(s&&n){let a=r.lastPerformed.localeCompare(t.lastPerformed);if(a!==0)return a}return t.name.localeCompare(r.name)})}loadRoutinesFromStorage(){let e=this.storageService.getItem(this.ROUTINES_STORAGE_KEY);return e?this._sortRoutines(e):[]}_saveRoutinesToStorage(e){let t=this._sortRoutines(e);this.storageService.setItem(this.ROUTINES_STORAGE_KEY,t),this.routinesSubject.next(t)}_seedAndMergeRoutinesFromStaticData(e){try{let t=G,r=this._migrateRoutines(t),s=new Set(e.map(a=>a.id)),n=r.filter(a=>!s.has(a.id));if(n.length>0){console.log(`Seeding ${n.length} new routines from static data`);let a=[...e,...n];this.saveRoutinesToStorage(a)}else console.log("No new routines to seed from static data. All are present in storage")}catch(t){console.error("Failed to process or seed routines from static data:",t)}finally{this.isLoadingRoutinesSubject.next(!1)}}saveRoutinesToStorage(e){this.storageService.setItem(this.ROUTINES_STORAGE_KEY,e),this.routinesSubject.next([...this._sortRoutines(e)])}getCurrentRoutines(){return this.routinesSubject.getValue()}getRoutineById(e){return this.routines$.pipe(N(t=>t.find(r=>r.id===e)))}getRoutineByIdSync(e){return this.routinesSubject.getValue().find(t=>t.id===e)}addRoutine(e){let t=this.routinesSubject.getValue(),r=E(b({},e),{id:x()}),s=[...t,r];return this.saveRoutinesToStorage(s),console.log("Added routine:",r),r}updateRoutine(e,t=!1){return w(this,null,function*(){let r=this.routinesSubject.getValue(),s=r.findIndex(n=>n.id===e.id);if(!t){let n=this.isPausedSession()?this.getPausedSession():null,a=!1;if(n&&n.routineId&&n.routineId===e.id&&(yield this.alertService.showAlert(this.translate.instant("workoutService.alerts.editRunningTitle"),this.translate.instant("workoutService.alerts.editRunningMessage")).then(()=>{a=!0,s=-1})),a)return}if(s>-1){let n=[...r];return n[s]=this._migrateRoutines([e])[0],this.saveRoutinesToStorage(n),console.log("Updated routine:",e),e}this.toastService.error(this.translate.instant("workoutService.toasts.updateErrorMessage",{id:e.id}),4e3,this.translate.instant("workoutService.toasts.updateErrorTitle"))})}deleteRoutine(e){let t=this.routinesSubject.getValue(),r=t.filter(s=>s.id!==e);r.length<t.length?(this.saveRoutinesToStorage(r),console.log("Deleted routine with id:",e)):console.warn(`WorkoutService: Routine with id ${e} not found for deletion`)}generateWorkoutExerciseId(){return x()}generateExerciseSetId(){return x()}suggestNextSetParameters(e,t){let r=JSON.parse(JSON.stringify(t)),s=this.progressiveOverloadService.getSettings();return!s.enabled||!s.strategies||s.strategies.length===0||!e||(t.targetReps&&e.repsLogged>=t.targetReps||t.targetRepsMin&&e.repsLogged>=t.targetRepsMin||t.targetDuration&&e.repsLogged>=t.targetDuration||t.targetDurationMin&&e.repsLogged>=t.targetDurationMin||t.targetDistance&&e.weightLogged&&e.weightLogged>=t.targetDistance||t.targetDistanceMin&&e.weightLogged&&e.weightLogged>=t.targetDistanceMin?s.strategies.forEach(a=>{switch(a){case"weight":s.weightIncrement&&e.weightLogged!=null&&(r.targetWeight=parseFloat((e.weightLogged+s.weightIncrement).toFixed(2)));break;case"reps":s.repsIncrement&&e.repsLogged!=null&&(r.targetReps=(r.targetReps||e.repsLogged)+s.repsIncrement);break;case"duration":s.durationIncrement&&e.repsLogged!=null&&(r.targetDuration=(r.targetDuration||e.repsLogged)+s.durationIncrement);break;case"distance":s.distanceIncrement&&e.weightLogged!=null&&(r.targetDistance=parseFloat(((r.targetDistance||e.weightLogged)+s.distanceIncrement).toFixed(2)));break}}):(console.log("PO Suggestion: Failure last time. Sticking to previous attempt's parameters."),r.targetWeight=t.targetWeight??t.targetWeightMin,r.targetReps=t.targetReps??t.targetRepsMin,r.targetDuration=t.targetDuration??t.targetDurationMin,r.targetDistance=t.targetDistance??t.targetDistanceMin),r.id=t.id),r}getDataForBackup(){return this.routinesSubject.getValue()}mergeData(e){if(!Array.isArray(e)){this.toastService.error(this.translate.instant("workoutService.toasts.importFailed"),0,this.translate.instant("workoutService.toasts.importErrorTitle"));return}let t=this._migrateRoutines(e),r=this.routinesSubject.getValue(),s=new Map(r.map(g=>[g.id,g])),n=0,a=0;t.forEach(g=>{if(!g.id||!g.name){console.warn("Skipping invalid routine during import:",g);return}s.has(g.id)?n++:a++,s.set(g.id,g)});let i=Array.from(s.values());this._saveRoutinesToStorage(this._sortRoutines(i)),console.log(`WorkoutService: Merged imported routines. Updated: ${n}, Added: ${a}`),this.toastService.success(this.translate.instant("workoutService.toasts.importSuccessMessage",{updatedCount:n,addedCount:a}),6e3,this.translate.instant("workoutService.toasts.importSuccessTitle"))}clearAllRoutines_DEV_ONLY(){let e=this.translate.instant("workoutService.alerts.clearAllTitle");return this.alertService.showConfirm(e,this.translate.instant("workoutService.alerts.clearAllMessage")).then(t=>w(this,null,function*(){t&&t.data&&(this.saveRoutinesToStorage([]),yield this.alertService.showAlert(e,this.translate.instant("workoutService.alerts.clearAllSuccess")))}))}clearAllExecutedRoutines_DEV_ONLY(){return this.alertService.showConfirm("Info","Are you sure you want to reset the 'lastPerformed' property of ALL routines LOGS? This cannot be undone.").then(e=>w(this,null,function*(){e&&e.data&&(this.getCurrentRoutines().forEach(t=>{t.lastPerformed=void 0,this.updateRoutine(t)}),yield this.alertService.showAlert("Info","All routines logs cleared!"))}))}getEstimatedWorkTimeForSet(e){let t=0;(!e.targetReps||e.targetReps<=0)&&e.targetRepsMin&&e.targetRepsMax?e.targetReps=Math.round((e.targetRepsMin+e.targetRepsMax)/2):(!e.targetReps||e.targetReps<=0)&&e.targetRepsMin?e.targetReps=e.targetRepsMin:(!e.targetReps||e.targetReps<=0)&&e.targetRepsMax&&(e.targetReps=e.targetRepsMax),e.targetReps&&e.targetReps>0&&(t=e.targetReps*4);let r=e.targetDuration||0,s=Math.max(t,r);return s>0?Math.max(s,30):30}getRestTimeForSet(e){return e.targetRest||0}getEstimatedRoutineDuration(e){if(!e||!e.exercises||e.exercises.length===0)return 0;let t=0,r=e.exercises,s=new Set;for(let n=0;n<r.length;n++){let a=r[n];if(!(a.supersetId&&s.has(a.supersetId)))if(a.supersetId){s.add(a.supersetId);let i=r.filter(m=>m.supersetId===a.supersetId),g=i.find(m=>m.supersetOrder===0);if(!g){n+=i.length-1;continue}let l=g.sets.length,c=n+i.length>=r.length;if(g.supersetType==="emom"){let h=(g.emomTimeSeconds||60)*l;if(t+=h,!c){let d=i[i.length-1].sets[l-1];t+=this.getRestTimeForSet(d)}}else for(let m=0;m<l;m++)i.forEach((h,p)=>{let d=h.sets[m];if(d){t+=this.getEstimatedWorkTimeForSet(d);let y=m===l-1,f=p===i.length-1;y&&f&&c||(t+=this.getRestTimeForSet(d))}});n+=i.length-1}else a.sets.forEach((i,g)=>{t+=this.getEstimatedWorkTimeForSet(i);let l=n===r.length-1,c=g===a.sets.length-1;l&&c||(t+=this.getRestTimeForSet(i))})}return Math.round(t/60)}startWorkout(){}checkPlayerMode(e){let t=this.getCurrentRoutines().find(i=>i.id===e),r="compact",s=this.subscriptionService.isPremium()&&this.appSettingsService.getSettings()?this.appSettingsService.getSettings().playerMode:r,n=this.subscriptionService.isPremium()&&t?.goal==="tabata",a="";return n?"/workout/play/tabata":s==="focus"?"/workout/play/focus":"/workout/play/compact"}navigateToPlayer(e,t){return w(this,null,function*(){let r=this.checkPlayerMode(e),s=t&&t.forceNavigation,n=yield this.checkForPausedSession(s);if(n){let a=n.routineId||"-1";r=this.checkPlayerMode(a),this.router.navigate([r,a],{queryParams:{resume:"true"}})}else this.router.navigate([r,e],t||{})})}removePausedWorkout(e=!0){this.storageService.removeItem(this.PAUSED_WORKOUT_KEY),this._pausedWorkoutDiscarded.next(),e&&this.toastService.info(this.translate.instant("workoutService.toasts.pausedDiscarded"))}savePausedWorkout(e){e&&this.storageService.setItem(this.PAUSED_WORKOUT_KEY,e)}isPausedSession(){return!!this.storageService.getItem(this.PAUSED_WORKOUT_KEY)}getPausedVersion(){return this.storageService.getItem(this.PAUSED_STATE_VERSION)||"1.0"}getPausedSession(){return this.storageService.getItem(this.PAUSED_WORKOUT_KEY)}checkForPausedSession(e=!1){return w(this,null,function*(){let t=this.storageService.getItem(this.PAUSED_WORKOUT_KEY);if(t){if(e||(yield this.alertService.showConfirmationDialog(this.translate.instant("workoutService.alerts.resume.title"),this.translate.instant("workoutService.alerts.resume.message"),[{text:this.translate.instant("workoutService.alerts.resume.resumeButton"),role:"confirm",data:!0,icon:"play"},{text:this.translate.instant("workoutService.alerts.resume.discardButton"),role:"cancel",data:!1,icon:"trash"}]))?.data)return t;this.storageService.removeItem(this.PAUSED_WORKOUT_KEY);return}})}promptAndCreateWorkoutExercise(e,t){return w(this,null,function*(){let r=e.category==="cardio",s=e.category==="kettlebells",n=s&&t?t.targetWeight??t.weightLogged:this.unitsService.currentWeightUnit()==="kg"?10:22.2,a=r?60:void 0,i=r?1:void 0,g=s?45:60,l=s&&t?t.targetReps??t.repsLogged:10,c=3,m=[{label:this.translate.instant("workoutService.prompts.labels.exerciseName"),name:"name",type:"text",value:e.name,attributes:{disabled:!0}},{label:this.translate.instant("workoutService.prompts.labels.numSets"),name:"numSets",type:"number",value:c,attributes:{min:1,required:!0}},{label:this.translate.instant("workoutService.prompts.labels.rest"),name:"rest",type:"number",value:g,attributes:{min:1,required:!0}}],h=r?[...m,{label:this.translate.instant("workoutService.prompts.labels.targetDistance",{unit:this.unitsService.getDistanceMeasureUnitSuffix()}),name:"distance",type:"number",value:i,attributes:{min:0,required:!0}},{label:this.translate.instant("workoutService.prompts.labels.targetDuration"),name:"duration",type:"number",value:a,attributes:{min:0,required:!0}}]:[...m,{label:this.translate.instant("workoutService.prompts.labels.numReps"),name:"numReps",type:"number",value:l,attributes:{min:0,required:!0}},{label:this.translate.instant("workoutService.prompts.labels.targetWeight",{unit:this.unitsService.getWeightUnitSuffix()}),name:"weight",type:"number",value:n,attributes:{min:0,required:!0}}],p=yield this.alertService.showPromptDialog(this.translate.instant("workoutService.prompts.addExerciseTitle",{exerciseName:e.name}),"",h);if(!p)return null;let d=String(p.name).trim()||e.name,y=parseInt(String(p.numSets))||c,f=parseInt(String(p.numReps))||l,S=parseFloat(String(p.weight))??n,R=parseInt(String(p.distance))||i,L=parseInt(String(p.duration))||a,z=parseInt(String(p.rest))||g,A=[];for(let P=0;P<y;P++)A.push({id:`custom-set-${x()}`,targetReps:r?void 0:f,targetWeight:r?void 0:S,targetDistance:r?R:void 0,targetDuration:r?L:void 0,targetRest:z,type:"standard",notes:""});return{id:`custom-exercise-${x()}`,exerciseId:e.id,exerciseName:d,sets:A,supersetId:null,supersetOrder:null,sessionStatus:"pending",type:"standard"}})}areAllPropertiesFalsy(e){return Object.values(e).every(t=>!t)}reorderExercisesForSupersets(e){let t=[],r=new Set;for(let s of e)r.has(s.id)||(s.supersetId?e.filter(a=>a.supersetId===s.supersetId).sort((a,i)=>(a.supersetOrder??0)-(i.supersetOrder??0)).forEach(a=>{t.push(a),r.add(a.id)}):(t.push(s),r.add(s.id)));return t}createSuperset(e,t,r){return w(this,null,function*(){let n=e.exercises.map((p,d)=>E(b({},p),{originalIndex:d})).filter(p=>!p.supersetId).map(p=>({label:p.exerciseName,name:String(p.originalIndex),type:"checkbox",value:p.originalIndex===t}));n.push({name:"supersetRounds",type:"number",label:"Number of Rounds",value:"1",min:1,placeholder:"Enter number of rounds"});let a=yield this.alertService.showPromptDialog("Create Superset","Select exercises to link together.",n);if(!a||this.areAllPropertiesFalsy(a))return null;let i=Number(a.supersetRounds)||1;delete a.supersetRounds;let g=Object.keys(a).filter(p=>a[p]).map(Number).sort((p,d)=>p-d);if(g.length<2)return this.toastService.info("Please select at least two exercises to create a superset."),null;let l=JSON.parse(JSON.stringify(e)),c=[...r],m=x(),h=0;for(let p of g){let d=l.exercises[p];if(d){c=c.filter(R=>R.id!==d.id);let y=d.sets.length>0?b({},d.sets[0]):{id:x(),targetReps:8,targetWeight:10,targetRest:60,type:"standard"},f=p===g[g.length-1],S=["weight","reps"];f&&S.push("rest"),d.sets=[],d.supersetId=m,d.supersetOrder=h++,d.type="superset";for(let R=1;R<=i;R++)d.sets.push(E(b({},y),{id:x(),fieldOrder:S}))}}return l.exercises=this.reorderExercisesForSupersets(l.exercises),this.alertService.showAlert("INFO",`Superset created with ${g.length} exercises and ${i} rounds: existing logs were cleared and sets standardized.`),{updatedRoutine:l,updatedLoggedExercises:c,newSupersetId:m}})}vibrate(){let e=navigator;e&&"vibrate"in e&&e.vibrate(50)}addToSuperset(e,t,r,s){return w(this,null,function*(){let n=e.exercises[t];if(n.supersetId)return s.info("This exercise is already in a superset."),null;let a=new Map;if(e.exercises.forEach(f=>{f.supersetId&&(a.has(f.supersetId)||a.set(f.supersetId,[]),a.get(f.supersetId).push(f))}),a.size===0)return s.error("No supersets exist to add this exercise to."),null;let i=Array.from(a.values()).map((f,S)=>({name:"supersetChoice",type:"radio",label:`Superset: ${f.map(R=>R.exerciseName).join(" & ")}`,value:f[0].supersetId,checked:S===0})),g=yield r.showPromptDialog("Add to Superset",`Which superset for "${n.exerciseName}"?`,i,"Add","Cancel");if(!g||!g.supersetChoice)return null;let l=g.supersetChoice,c=JSON.parse(JSON.stringify(e)),m=c.exercises.find(f=>f.id===n.id),h=c.exercises.filter(f=>f.supersetId===l);if(!m||h.length===0)return s.error("Could not find the target exercise or superset."),null;h.forEach(f=>{let S=c.exercises.find(R=>R.id===f.id);S&&S.sets.forEach(R=>{R.fieldOrder&&(R.fieldOrder=R.fieldOrder.filter(L=>L!=="rest"))})});let p=h[0].sets.length||1,d=m.sets[0]||{id:x(),targetReps:8,targetWeight:10,targetRest:60,type:"superset"},y=["weight","reps","rest"];return m.sets=Array.from({length:p},()=>E(b({},d),{id:x(),fieldOrder:y})),m.supersetId=String(l),m.supersetOrder=h.length,m.type="superset",c.exercises=this.reorderExercisesForSupersets(c.exercises),s.success(`${m.exerciseName} added to the superset.`),c})}removeFromSuperset(e,t,r,s,n){return w(this,null,function*(){let a=e.exercises[t];if(!a.supersetId||!(yield s.showConfirm("Remove from Superset",`Remove ${a.exerciseName} from this superset? Its logged sets for this session will be cleared.`))?.data)return null;let g=JSON.parse(JSON.stringify(e)),l=[...r],c=g.exercises[t],m=c.supersetId,h=l.findIndex(d=>d.id===c.id);h>-1&&(l.splice(h,1),n.info(`Logged data for ${c.exerciseName} was cleared.`)),c.supersetId=null,c.supersetOrder=null,c.type="standard";let p=g.exercises.filter(d=>d.supersetId===m);return p.length<=1?(p.forEach(d=>{d.supersetId=null,d.supersetOrder=null,d.type="standard"}),n.info("Superset dissolved as only one exercise remains.")):(p.sort((d,y)=>(d.supersetOrder??0)-(y.supersetOrder??0)).forEach((d,y)=>{d.supersetOrder=y}),n.info(`${c.exerciseName} removed from superset.`)),g.exercises=this.reorderExercisesForSupersets(g.exercises),{updatedRoutine:g,updatedLoggedExercises:l}})}getSetTargetDisplay(e,t){if(!e)return"";if(t==="tempo")return this.isLoggedSet(e)?e.tempoLogged||"-":e.targetTempo||"-";let r=-1,s=-1,n=-1;switch(t){case"reps":r=e.targetRepsMin||0,s=e.targetRepsMax||0,n=e.targetReps||0;break;case"duration":r=e.targetDurationMin||0,s=e.targetDurationMax||0,n=e.targetDuration||0;break;case"rest":r=e.targetRestMin||0,s=e.targetRestMax||0,n=e.targetRest||0;break;case"weight":r=e.targetWeightMin||0,s=e.targetWeightMax||0,n=e.targetWeight||0;break;case"distance":r=e.targetDistanceMin||0,s=e.targetDistanceMax||0,n=e.targetDistance||0;break;default:break}if(r!=null||s!=null){if(r!=null&&s!=null)return r===s?(n??r).toString():`${r}-${s}`;if(r!=null)return`${r}+`;if(s!=null)return`${this.translate.instant("workoutService.display.upTo")} ${s}`}return n!=null?`${n}`:""}getWeightDisplay(e,t){let r=e.weightLogged,s=r??e.targetWeight;return t?.category==="cardio"||t?.category==="stretching"?s!=null&&s>0?`${s} ${this.unitsService.getWeightUnitSuffix()}`:this.translate.instant("workoutService.display.weightNotApplicable"):t?.category==="bodyweight/calisthenics"?s!=null&&s>0?`${s} ${this.unitsService.getWeightUnitSuffix()}`:this.translate.instant("workoutService.display.bodyweight"):s!=null&&s>0?`${s} ${this.unitsService.getWeightUnitSuffix()}`:s===0?this.translate.instant("workoutService.display.noAddedWeight"):this.translate.instant("workoutService.display.userDefined")}_migrateSetParams(e){let t=b({},e);return typeof e.reps=="number"&&typeof t.targetReps>"u"&&(t.targetReps=e.reps,delete t.reps),typeof e.weight=="number"&&typeof t.targetWeight>"u"&&(t.targetWeight=e.weight,delete t.weight),typeof e.duration=="number"&&typeof t.targetDuration>"u"&&(t.targetDuration=e.duration,delete t.duration),typeof e.distance=="number"&&typeof t.targetDistance>"u"&&(t.targetDistance=e.distance,delete t.distance),(t.targetRest===void 0||t.targetRest===null)&&(typeof t.targetRestAfterSet=="number"?t.targetRest=t.targetRestAfterSet:typeof t.restAfterSet=="number"&&(t.targetRest=t.restAfterSet)),delete t.targetRestAfterSet,delete t.restAfterSet,t.id||(t.id=x()),t}_migrateRoutines(e){return!e||e.length===0?[]:e.map(t=>{let r=t.exercises.map(s=>{let n=s.sets.map(a=>this._migrateSetParams(a));return E(b({},s),{sets:n})});return E(b({},t),{exercises:r})})}enableAllRoutines_DEV_ONLY(){let e=this.getCurrentRoutines().map(t=>E(b({},t),{isDisabled:!1}));this._saveRoutinesToStorage(e),this.toastService.success(this.translate.instant("workoutService.toasts.enableAllSuccess"))}getSupersetSize(e,t){let r=e?.exercises[t];return r?.supersetId&&e?.exercises.filter(s=>s.supersetId===r.supersetId).length||0}exerciseNameDisplay(e){if(!e||!e.exerciseName)return this.translate.instant("workoutService.display.unnamedExercise");let t=e.exerciseName.trim();return/dumbbell/i.test(t)&&(t=t.replace(/dumbbell/gi,"DB")),/kettlebell/i.test(t)&&(t=t.replace(/kettlebell/gi,"KB")),/kb/i.test(t)&&(t=t.replace(/overhead/gi,"OH")),/alternating/i.test(t)&&(t=t.replace(/alternating/gi,"ALT.")),t}addFieldToSet(e,t,r,s,n){let a=JSON.parse(JSON.stringify(e)),i=a.exercises[t].sets[r];if(!i.fieldOrder){let{visible:c}=this.getFieldsForSet(e,t,r);i.fieldOrder=c}i.fieldOrder.includes(s)||i.fieldOrder.push(s);let g=s==="tempo"||s==="notes"?String(n):"",l=s!=="tempo"&&s!=="notes"?Number(n):null;switch(s){case"weight":{i.targetWeight=l,i.weightLogged=l;break}case"reps":{i.targetReps=l,i.repsLogged=l;break}case"distance":{i.targetDistance=l,i.distanceLogged=l;break}case"duration":{i.targetDuration=l,i.durationLogged=l;break}case"rest":{i.targetRest=l,i.restLogged=l;break}case"tempo":{i.targetTempo=g,i.tempoLogged=g;break}}return a}getVisibleExerciseColumns(e,t){let r=e.exercises[t];if(!r||r.sets?.length===0)return{weight:!1,reps:!1,distance:!1,duration:!1,tempo:!1,rest:!1};let s=b({},r),n=b({},q(r));return{weight:s.sets.some(i=>(i.targetWeight??0)>0||(i.targetWeightMin??0)>0)||n.sets.some(i=>(i.targetWeight??0)>0)||!!(s.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("weight"))||n.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("weight"))),reps:s.sets.some(i=>(i.targetReps??0)>0||(i.targetRepsMin??0)>0)||n.sets.some(i=>(i.targetReps??0)>0)||!!(s.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("reps"))||n.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("reps"))),distance:s.sets.some(i=>(i.targetDistance??0)>0||(i.targetDistanceMin??0)>0)||n.sets.some(i=>(i.targetDistance??0)>0)||!!(s.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("distance"))||n.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("distance"))),duration:s.sets.some(i=>(i.targetDuration??0)>0||(i.targetDurationMin??0)>0)||n.sets.some(i=>(i.targetDuration??0)>0)||!!(s.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("duration"))||n.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("duration"))),rest:s.sets.some(i=>(i.targetRest??0)>0)||!!(s.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("rest"))||n.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("rest"))),tempo:s.sets.some(i=>!!i.targetTempo&&i.targetTempo.trim().length>0)||n.sets.some(i=>!!i.targetTempo&&i.targetTempo.trim().length>0)||!!(s.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("tempo"))||n.sets.some(i=>i.fieldOrder&&i.fieldOrder.includes("tempo")))}}getVisibleSetColumns(e,t,r){let n=e.exercises[t]?.sets[r];if(!n)return{weight:!1,reps:!1,distance:!1,duration:!1,tempo:!1};let a;if(this.isLoggedSet(n))a={weight:!!((n.weightLogged??0)>0||n.fieldOrder?.includes("weight")),reps:!!((n.repsLogged??0)>0||n.fieldOrder?.includes("reps")),distance:!!((n.distanceLogged??0)>0||n.fieldOrder?.includes("distance")),duration:!!((n.durationLogged??0)>0||n.fieldOrder?.includes("duration")),tempo:!!(n.targetTempo?.trim()||n.fieldOrder?.includes("tempo")),rest:!!((n.restLogged??0)>0||n.fieldOrder?.includes("rest"))};else{let i=n;a={weight:!!((i.targetWeight??0)>0||(i.targetWeightMin??0)>0||i.fieldOrder?.includes("weight")),reps:!!((i.targetReps??0)>0||(i.targetRepsMin??0)>0||i.fieldOrder?.includes("reps")),distance:!!((i.targetDistance??0)>0||(i.targetDistanceMin??0)>0||i.fieldOrder?.includes("distance")),duration:!!((i.targetDuration??0)>0||(i.targetDurationMin??0)>0||i.fieldOrder?.includes("duration")),tempo:!!(i.targetTempo?.trim()||i.fieldOrder?.includes("tempo")),rest:!!((i.targetRest??0)>0||i.fieldOrder?.includes("rest"))}}return a}promptAddField(e,t,r){return w(this,null,function*(){let{hidden:s}=this.getFieldsForSet(e,t,r);if(s.length===0)return this.toastService.info("All available metrics are already added to this set."),null;let n=!!e.exercises[t].supersetId,a;if(n){let S=["weight","reps"];if(a=s.filter(R=>S.includes(R)),a.every(R=>!S.includes(R)))return this.toastService.info("Only 'Weight' and 'Reps' can be added to sets within a superset."),null}let g=(a||s).map(S=>({text:S.charAt(0).toUpperCase()+S.slice(1),role:"add",data:S,icon:S==="duration"?"duration":S}));g.push({text:this.translate.instant("common.cancel"),role:"cancel",data:null,icon:"cancel"});let l=yield this.alertService.showConfirmationDialog(this.translate.instant("workoutBuilder.prompts.addField.title"),this.translate.instant("workoutBuilder.prompts.addField.message",{setNumber:r+1}),g,{showCloseButton:!0});if(!l||!l.data)return null;let c=l.data,m=`${this.translate.instant("workoutBuilder.prompts.setTarget.title",{field:c})}`,h=0;switch(c){case"weight":m+=` (${this.unitsService.getWeightUnitSuffix()})`,h=10;break;case"reps":h=8;break;case"duration":m+=" (s)",h=60;break;case"rest":m+=" (s)",h=60;break;case"distance":m+=` (${this.unitsService.getDistanceMeasureUnitSuffix()})`,h=1;break;case"tempo":h="2-0-1-0";break}let p=c!=="tempo"?{min:"0",step:"any"}:{},d=yield this.alertService.showPromptDialog(this.translate.instant("workoutBuilder.prompts.setTarget.title",{field:c.charAt(0).toUpperCase()+c.slice(1)}),this.translate.instant("workoutBuilder.prompts.setTarget.message",{setNumber:r+1}),[{name:"targetValue",type:c==="tempo"?"text":"number",label:m,value:h,attributes:p}],this.translate.instant("workoutBuilder.prompts.setTarget.applyButton"));if(!d||d.targetValue===null||d.targetValue===void 0)return null;let y=d.targetValue,f=this.addFieldToSet(e,t,r,c,y);return this.toastService.success(`'${c.toUpperCase()}' field added to Set #${r+1}.`),f})}defaultHiddenFields(){return{visible:[],hidden:this.getDefaultFields()}}getDefaultFields(){return["weight","reps","distance","duration","tempo","rest"]}getFieldsForSet(e,t,r){let s=this.getDefaultFields(),n=this.getVisibleSetColumns(e,t,r),a=s.filter(g=>n[g]),i=s.filter(g=>!a.includes(g));return{visible:a,hidden:i}}promptRemoveField(e,t,r){return w(this,null,function*(){let s=this.getVisibleSetColumns(e,t,r),n=Object.keys(s).filter(c=>s[c]);if(n.length===0)return this.toastService.info("No fields can be removed from this set."),e;let a=n.map(c=>({text:c.charAt(0).toUpperCase()+c.slice(1),role:"remove",data:c,icon:c==="duration"?"duration":c,cssClass:"bg-red-500 hover:bg-red-600"}));a.push({text:"Cancel",role:"cancel",data:null,icon:"cancel"});let i=yield this.alertService.showConfirmationDialog("Remove Field from Exercise","Which metric would you like to remove from this set of this exercise?",a,{showCloseButton:!0});if(!i||!i.data)return null;let g=i.data;return this.removeMetricFromSet(e,t,r,g)})}removeMetricFromSet(e,t,r,s){let n=JSON.parse(JSON.stringify(e)),a=n.exercises[t].sets[r];return a[`target${s.charAt(0).toUpperCase()+s.slice(1)}`]=void 0,a[`target${s.charAt(0).toUpperCase()+s.slice(1)}Min`]=void 0,a[`target${s.charAt(0).toUpperCase()+s.slice(1)}Max`]=void 0,a[`${s}Used`]=void 0,a[`${s}Achieved`]=void 0,a[`${s}AfterSet`]=void 0,a.fieldOrder&&(a.fieldOrder=a.fieldOrder.filter(i=>i!==s)),this.toastService.info(`'${s.toUpperCase()}' field removed from set #${r+1}.`),n}getSetFieldOrder(e,t,r){let n=e?.exercises?.[t]?.sets?.[r];return n&&Array.isArray(n.fieldOrder)?n.fieldOrder:null}getInitialRoutines(e){return this.routinesSubject.getValue().slice(0,e)}isLoggedSet(e){return e&&e.workoutLogId&&(typeof e.repsLogged<"u"||typeof e.weightLogged<"u"||typeof e.durationLogged<"u"||typeof e.distanceLogged<"u"||typeof e.tempoLogged<"u")}getSetFieldValue(e,t){if(!e)return"-";if(this.isLoggedSet(e))switch(t){case"reps":return(e.repsLogged??"-").toString();case"weight":return e.weightLogged!=null?e.weightLogged.toString():"-";case"distance":return(e.distanceLogged??"-").toString();case"duration":return this.formatSecondsToTime(e.durationLogged);case"rest":return this.formatSecondsToTime(e.restLogged);case"tempo":return e.tempoLogged||"-";default:return"-"}else{let r=e;switch(t){case"reps":return r.targetRepsMin!=null&&r.targetRepsMax!=null?Math.floor((r.targetRepsMin+r.targetRepsMax)/2).toString():(r.targetReps??"-").toString();case"weight":return r.targetWeightMin!=null&&r.targetWeightMax!=null?Math.floor((r.targetWeightMin+r.targetWeightMax)/2).toString():(r.targetWeight??"-").toString();case"distance":return r.targetDistanceMin!=null&&r.targetDistanceMax!=null?Math.floor((r.targetDistanceMin+r.targetDistanceMax)/2).toString():(r.targetDistance??"-").toString();case"duration":if(r.targetDurationMin!=null&&r.targetDurationMax!=null){let s=Math.floor((r.targetDurationMin+r.targetDurationMax)/2);return this.formatSecondsToTime(s)}return this.formatSecondsToTime(r.targetDuration??void 0);case"rest":return this.formatSecondsToTime(r.targetRest??void 0);case"tempo":return r.targetTempo||"-";default:return"-"}}}_formatSingleSecondValue(e){let t=Number(e);if(isNaN(t))return"";let r=String(Math.floor(t/60)).padStart(2,"0"),s=String(t%60).padStart(2,"0");return`${r}:${s}`}formatSecondsToTime(e){if(e==null||e==="")return"";if(typeof e=="string"&&e.includes("-")){let[t,r]=e.split("-"),s=this._formatSingleSecondValue(t),n=this._formatSingleSecondValue(r);return`${s}-${n}`}return this._formatSingleSecondValue(e)}static \u0275fac=function(t){return new(t||o)};static \u0275prov=k({token:o,factory:o.\u0275fac,providedIn:"root"})};export{T as a,Q as b,H as c,U as d,O as e,Se as f,Re as g,J as h};
