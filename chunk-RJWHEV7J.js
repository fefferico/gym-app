import{a as X}from"./chunk-YK4QNPHF.js";import{r as Q}from"./chunk-FEODDXWY.js";import{$ as A,Ab as L,B as g,Bc as R,Cc as j,Dc as U,Ec as H,Ga as l,Ha as r,Ia as n,Ja as c,Jc as Y,Kb as F,Lb as k,Lc as z,Mb as M,Oc as J,Q as v,Ra as C,Rb as N,Rc as W,Xb as D,bb as a,eb as _,fc as O,hc as V,ma as d,nb as u,nc as B,oc as p,pc as P,qc as K,s as T,sb as w,tb as I,ua as E,uc as q,vc as G,yc as $,za as s}from"./chunk-M7BB5PNA.js";import{a as S}from"./chunk-GAL4ENT6.js";var f=o=>({"input-invalid":o});function tt(o,t){o&1&&(r(0,"span"),a(1,"Log an Activity"),n())}function et(o,t){o&1&&(r(0,"span"),a(1,"Edit Activity Log"),n())}function it(o,t){o&1&&(r(0,"span"),a(1,"Record any physical activity you've done."),n())}function nt(o,t){o&1&&(r(0,"span"),a(1,"Update the details of your logged activity."),n())}function ot(o,t){if(o&1&&(r(0,"option",30),a(1),n()),o&2){let i=t.$implicit;l("value",i.id),d(),_(" ",i.name," (",i.category,") ")}}function rt(o,t){o&1&&(r(0,"div",31),a(1," Please select an activity. "),n())}function at(o,t){o&1&&(r(0,"div",31),a(1," A valid date is required. "),n())}function dt(o,t){o&1&&(r(0,"div",31),a(1," A start time is required. "),n())}function lt(o,t){o&1&&(r(0,"div",31),a(1," An end time is required. "),n())}function mt(o,t){o&1&&(r(0,"div",31),a(1," End time must be after start time. "),n())}function st(o,t){o&1&&(r(0,"div")(1,"label",32),a(2,"Location (optional)"),n(),c(3,"input",33),n())}function ct(o,t){o&1&&(r(0,"div")(1,"label",34),a(2,"Distance (km)"),n(),c(3,"input",35),n())}function pt(o,t){o&1&&(r(0,"div")(1,"label",36),a(2,"Calories Burned (optional)"),n(),c(3,"input",37),n())}function vt(o,t){o&1&&(r(0,"span"),a(1,"LOG ACTIVITY"),n())}function gt(o,t){o&1&&(r(0,"span"),a(1,"UPDATE LOG"),n())}function ut(o,t){return i=>{let e=i.get(o)?.value,m=i.get(t)?.value;return e&&m&&e>=m?{timeInvalid:!0}:null}}var Z=class o{fb=v(Y);activityService=v(X);toastService=v(W);router=v(V);route=v(O);subscriptionService=v(Q);logActivityForm;availableActivities$;selectedActivity=A(null);isEditMode=A(!1);editingLogId=null;constructor(){this.logActivityForm=this.fb.group({activityId:["",[p.required]],date:[new Date().toISOString().split("T")[0],[p.required]],startTime:["12:00",[p.required]],endTime:["13:00",[p.required]],intensity:["Medium",[p.required]],location:["",[]],distanceKm:[{value:null,disabled:!0},[p.min(0)]],caloriesBurned:[{value:null,disabled:!0},[p.min(0)]],notes:[""]},{validators:ut("startTime","endTime")}),this.availableActivities$=this.activityService.getActivities(),L(()=>{this.updateFormForSelectedActivity(this.selectedActivity())})}ngOnInit(){this.subscriptionService.canAccess("activity")||this.subscriptionService.showUpgradeModal().then(()=>{this.router.navigate(["profile"])}),this.route.paramMap.pipe(g(1)).subscribe(t=>{let i=t.get("id");i&&(this.isEditMode.set(!0),this.editingLogId=i,this.loadLogForEditing(i))}),this.logActivityForm.get("activityId")?.valueChanges.subscribe(t=>{this.activityService.getActivities().pipe(g(1)).subscribe(i=>{let e=i.find(m=>m.id===t);this.selectedActivity.set(e||null)})})}loadLogForEditing(t){T({log:this.activityService.getActivityLogById(t).pipe(g(1)),activities:this.activityService.getActivities().pipe(g(1))}).subscribe(({log:i,activities:e})=>{if(i&&e){let m=e.find(h=>h.id===i.activityId);m&&this.selectedActivity.set(m);let y=new Date(i.startTime),b=i.endTime?new Date(i.endTime):new Date(i.startTime+i.durationMinutes*6e4),x=h=>h.toTimeString().substring(0,5);this.logActivityForm.patchValue({activityId:i.activityId,date:i.date,startTime:x(y),endTime:x(b),intensity:i.intensity,location:i.location,distanceKm:i.distanceKm,caloriesBurned:i.caloriesBurned,notes:i.notes})}else this.toastService.error("Could not find the activity log to edit.",0),this.router.navigate(["/history"])})}updateFormForSelectedActivity(t){if(!t){this.logActivityForm.get("distanceKm")?.disable(),this.logActivityForm.get("caloriesBurned")?.disable();return}this.logActivityForm.get("intensity")?.setValue(t.intensity,{emitEvent:!1});let i=t.defaultTrackingMetrics;i.distance?this.logActivityForm.get("distanceKm")?.enable():this.logActivityForm.get("distanceKm")?.disable(),i.calories?this.logActivityForm.get("caloriesBurned")?.enable():this.logActivityForm.get("caloriesBurned")?.disable(),this.logActivityForm.updateValueAndValidity()}onSubmit(){if(this.logActivityForm.invalid){this.toastService.error("Please fill out all required fields and ensure times are valid.",0,"Invalid Form"),Object.values(this.logActivityForm.controls).forEach(t=>{t.markAsTouched()});return}this.isEditMode()?this.updateLog():this.createLog()}createLog(){let t=this.prepareLogData();t&&(this.activityService.addActivityLog(t),this.router.navigate(["/history"]))}updateLog(){if(!this.editingLogId)return;let t=this.prepareLogData();if(!t)return;let i=S({id:this.editingLogId},t);this.activityService.updateActivityLog(i),this.router.navigate(["/activities/log",this.editingLogId])}prepareLogData(){let t=this.logActivityForm.getRawValue(),i=this.selectedActivity();if(!i)return null;let e=t.date,m=new Date(`${e}T${t.startTime}`).getTime(),y=new Date(`${e}T${t.endTime}`).getTime(),b=Math.round((y-m)/6e4);return{activityId:i.id,activityName:i.name,date:t.date,startTime:m,endTime:y,durationMinutes:b,intensity:t.intensity,location:t.location,distanceKm:t.distanceKm,caloriesBurned:t.caloriesBurned,notes:t.notes}}get f(){return this.logActivityForm.controls}static \u0275fac=function(i){return new(i||o)};static \u0275cmp=E({type:o,selectors:[["app-log-activity"]],decls:59,vars:31,consts:[[1,"container","mx-auto","max-w-2xl","p-4","sm:p-6"],[1,"mb-6"],[1,"text-3xl","font-bold","text-gray-800","dark:text-gray-200","flex","items-center"],["name","clipboard-list",1,"w-8","h-8","mr-3","text-primary"],[4,"ngIf"],[1,"text-gray-500","dark:text-gray-400","mt-1"],[1,"space-y-6","bg-white","dark:bg-gray-800","p-6","rounded-lg","shadow-md",3,"ngSubmit","formGroup"],["for","activityId",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["id","activityId","formControlName","activityId",1,"input-field",3,"ngClass"],["value","","disabled",""],[3,"value",4,"ngFor","ngForOf"],["class","validation-message",4,"ngIf"],[1,"grid","grid-cols-1","md:grid-cols-3","gap-6"],["for","date",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","date","id","date","formControlName","date",1,"input-field","dark:text-gray-300","dark:[color-scheme:dark]",3,"ngClass"],["for","startTime",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","time","id","startTime","formControlName","startTime",1,"input-field","dark:text-gray-300","dark:[color-scheme:dark]",3,"ngClass"],["for","endTime",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","time","id","endTime","formControlName","endTime",1,"input-field","dark:text-gray-300","dark:[color-scheme:dark]",3,"ngClass"],["for","intensity",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["id","intensity","formControlName","intensity",1,"input-field"],["value","Low"],["value","Medium"],["value","High"],[1,"grid","grid-cols-1","md:grid-cols-2","gap-6"],["for","notes",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["id","notes","formControlName","notes","rows","3","placeholder","Any details about your activity...",1,"input-field"],[1,"pt-4","border-t","border-gray-200","dark:border-gray-700","flex","justify-center"],["type","submit",1,"flex","items-center","text-m","bg-primary","text-white","hover:bg-primary-dark","font-semibold","rounded-md","disabled:opacity-50","p-2",3,"disabled"],["name","save",1,"w-5","h-5","mr-1"],[3,"value"],[1,"validation-message"],["for","location",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","string","id","location","formControlName","location","placeholder","e.g., Wonderful Street",1,"input-field"],["for","distanceKm",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","number","id","distanceKm","formControlName","distanceKm","placeholder","e.g., 5.5",1,"input-field"],["for","caloriesBurned",1,"block","text-sm","font-medium","text-gray-700","dark:text-gray-300","mb-1"],["type","number","id","caloriesBurned","formControlName","caloriesBurned","placeholder","e.g., 350",1,"input-field"]],template:function(i,e){i&1&&(r(0,"div",0)(1,"header",1)(2,"h1",2),c(3,"app-icon",3),s(4,tt,2,0,"span",4)(5,et,2,0,"span",4),n(),r(6,"p",5),s(7,it,2,0,"span",4)(8,nt,2,0,"span",4),n()(),r(9,"form",6),C("ngSubmit",function(){return e.onSubmit()}),r(10,"div")(11,"label",7),a(12,"Activity"),n(),r(13,"select",8)(14,"option",9),a(15,"-- Select an Activity --"),n(),s(16,ot,2,3,"option",10),w(17,"async"),n(),s(18,rt,2,0,"div",11),n(),r(19,"div",12)(20,"div")(21,"label",13),a(22,"Date"),n(),c(23,"input",14),s(24,at,2,0,"div",11),n(),r(25,"div")(26,"label",15),a(27,"Start Time"),n(),c(28,"input",16),s(29,dt,2,0,"div",11),n(),r(30,"div")(31,"label",17),a(32,"End Time"),n(),c(33,"input",18),s(34,lt,2,0,"div",11)(35,mt,2,0,"div",11),n()(),r(36,"div")(37,"label",19),a(38,"Perceived Intensity"),n(),r(39,"select",20)(40,"option",21),a(41,"Low"),n(),r(42,"option",22),a(43,"Medium"),n(),r(44,"option",23),a(45,"High"),n()()(),r(46,"div",24),s(47,st,4,0,"div",4)(48,ct,4,0,"div",4)(49,pt,4,0,"div",4),n(),r(50,"div")(51,"label",25),a(52,"Notes"),n(),c(53,"textarea",26),n(),r(54,"div",27)(55,"button",28),c(56,"app-icon",29),s(57,vt,2,0,"span",4)(58,gt,2,0,"span",4),n()()()()),i&2&&(d(4),l("ngIf",!e.isEditMode()),d(),l("ngIf",e.isEditMode()),d(2),l("ngIf",!e.isEditMode()),d(),l("ngIf",e.isEditMode()),d(),l("formGroup",e.logActivityForm),d(4),l("ngClass",u(23,f,e.f.activityId.touched&&e.f.activityId.invalid)),d(3),l("ngForOf",I(17,21,e.availableActivities$)),d(2),l("ngIf",e.f.activityId.touched&&e.f.activityId.invalid),d(5),l("ngClass",u(25,f,e.f.date.touched&&e.f.date.invalid)),d(),l("ngIf",e.f.date.touched&&e.f.date.invalid),d(4),l("ngClass",u(27,f,e.f.startTime.touched&&e.f.startTime.invalid)),d(),l("ngIf",e.f.startTime.touched&&e.f.startTime.invalid),d(4),l("ngClass",u(29,f,e.f.endTime.touched&&e.f.endTime.invalid||e.logActivityForm.hasError("timeInvalid"))),d(),l("ngIf",e.f.endTime.touched&&e.f.endTime.invalid),d(),l("ngIf",e.logActivityForm.hasError("timeInvalid")&&e.f.endTime.touched),d(12),l("ngIf",e.f.location.enabled),d(),l("ngIf",e.f.distanceKm.enabled),d(),l("ngIf",e.f.caloriesBurned.enabled),d(6),l("disabled",e.logActivityForm.invalid),d(2),l("ngIf",!e.isEditMode()),d(),l("ngIf",e.isEditMode()))},dependencies:[D,F,k,M,z,q,U,H,B,G,j,P,K,$,R,J,N],styles:[".input-field[_ngcontent-%COMP%]{display:block;width:100%;border-radius:.375rem;border-width:1px;--tw-border-opacity: 1;border-color:rgb(209 213 219 / var(--tw-border-opacity, 1));padding:.5rem;--tw-shadow: 0 1px 2px 0 rgb(0 0 0 / .05);--tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.input-field[_ngcontent-%COMP%]:focus{--tw-border-opacity: 1;border-color:rgb(224 70 13 / var(--tw-border-opacity, 1));--tw-ring-opacity: 1;--tw-ring-color: rgb(224 70 13 / var(--tw-ring-opacity, 1)) }.input-field[_ngcontent-%COMP%]:disabled{opacity:.5}.input-field[_ngcontent-%COMP%]:is(.dark *){--tw-border-opacity: 1;border-color:rgb(75 85 99 / var(--tw-border-opacity, 1));--tw-bg-opacity: 1;background-color:rgb(55 65 81 / var(--tw-bg-opacity, 1));--tw-text-opacity: 1;color:rgb(229 231 235 / var(--tw-text-opacity, 1))}.input-invalid[_ngcontent-%COMP%]{--tw-border-opacity: 1;border-color:rgb(239 68 68 / var(--tw-border-opacity, 1));--tw-ring-opacity: 1;--tw-ring-color: rgb(239 68 68 / var(--tw-ring-opacity, 1)) }.validation-message[_ngcontent-%COMP%]{margin-top:.25rem;font-size:.75rem;line-height:1rem;--tw-text-opacity: 1;color:rgb(239 68 68 / var(--tw-text-opacity, 1))}"]})};export{Z as LogActivityComponent,ut as timeOrderValidator};
